<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BomFilterMinimumChars" xml:space="preserve">
    <value>Bom输入框输入多少字符开始匹配</value>
  </data>
  <data name="BomFilterMode" xml:space="preserve">
    <value>Bom输入框字符匹配模式（1代表匹配开头，2代表匹配任意）</value>
  </data>
  <data name="CompleteIssueWaitingTime" xml:space="preserve">
    <value>完成问题等待时间</value>
  </data>
  <data name="DecimalLength" xml:space="preserve">
    <value>数字小数点长度</value>
  </data>
  <data name="DefaultPageSize" xml:space="preserve">
    <value>每页记录条数</value>
  </data>
  <data name="DefaultPickStrategy" xml:space="preserve">
    <value>默认拣货规则</value>
  </data>
  <data name="EntityPreference_Desc" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="EntityPreference_Id" xml:space="preserve">
    <value>代码</value>
  </data>
  <data name="EntityPreference_Seq" xml:space="preserve">
    <value>序号</value>
  </data>
  <data name="EntityPreference_Updated" xml:space="preserve">
    <value>选项更新成功。</value>
  </data>
  <data name="EntityPreference_Value" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="InProcessIssueWaitingTime" xml:space="preserve">
    <value>执行中问题等待时间</value>
  </data>
  <data name="IsRecordLocatoinTransactionDetail" xml:space="preserve">
    <value>是否记录库存事务明细</value>
  </data>
  <data name="ItemFilterMinimumChars" xml:space="preserve">
    <value>零件输入框输入多少字符开始匹配</value>
  </data>
  <data name="ItemFilterMode" xml:space="preserve">
    <value>零件输入框字符匹配模式（1代表匹配开头，2代表匹配任意）</value>
  </data>
  <data name="SessionCachedSearchStatementCount" xml:space="preserve">
    <value>Session缓存查询条件数量</value>
  </data>
  <data name="SMTPEmailAddr" xml:space="preserve">
    <value>邮件地址</value>
  </data>
  <data name="SMTPEmailHost" xml:space="preserve">
    <value>邮件主机</value>
  </data>
  <data name="SMTPEmailPasswd" xml:space="preserve">
    <value>邮件密码</value>
  </data>
  <data name="WMSAnjiRegion" xml:space="preserve">
    <value>默认安吉区域</value>
  </data>
</root>