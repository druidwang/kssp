<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generate the service class." %>
<%@ Property Name="NameSpace" Type="String" Default="com.Sconit" Category="EntityClass" Description="The assembly that contains the entity class." %>
<%@ Property Name="ClassName" Type="String" Category="EntityClass" Description="The entity class name." %>
<%@ Property Name="ModuleName" Type="String" Category="ModuleGroup" Description="The module group which contains the entity, for example, Security." %>
<%@ Property Name="Mapping" Type="com.Sconit.CodeSmith.MappingProperty" Category="Mapping" Description="The O/R mapping settings." %>
<%@ Assembly Name="com.Sconit.CodeSmith" %>
<%@ Import Namespace="com.Sconit.CodeSmith" %>
<%@ Import Namespace="System.Text" %>
<script runat="template">
  public string GenLowerCasePropertyName(string classPropertyName)
  {
    if (classPropertyName.Length == 0)
      return string.Empty;
      
    char firstChar = classPropertyName[0];
    firstChar = char.ToLower(firstChar);
    
    return firstChar + classPropertyName.Substring(1);
  }
  
  public string GenPKPara(string perfix, string suffix, string paraDivision, bool inculdeType, bool includeName, string typeNameDivision, bool isNameLowerCase, bool isEntity2Pk, string entity2PkDivision)
  {
    StringBuilder pkPara = new StringBuilder();
    int i = 0;
    foreach (MappingInfo mappingInfo in this.Mapping.MappingPKInfoCollection)
    {
      if (i == 0)
      {
        pkPara.Append(perfix + (inculdeType ? GetDataType(mappingInfo, isEntity2Pk) + typeNameDivision : string.Empty) 
          + (includeName ? GetClassPropertyName(mappingInfo, isNameLowerCase, isEntity2Pk, entity2PkDivision) : string.Empty) + suffix);
      } 
      else
      {
        pkPara.Append(paraDivision + perfix + (inculdeType ? GetDataType(mappingInfo, isEntity2Pk) + typeNameDivision : string.Empty) 
          + (includeName ? GetClassPropertyName(mappingInfo, isNameLowerCase, isEntity2Pk, entity2PkDivision) : string.Empty) + suffix);
      }
      i++;
    }
    return pkPara.ToString();
  }
  
  public string GenUniquePara(string perfix, string suffix, string paraDivision, bool inculdeType, bool includeName, string typeNameDivision, bool isNameLowerCase, bool isEntity2Pk, string entity2UniqueDivision)
  {
    StringBuilder UniquePara = new StringBuilder();
    int i = 0;
    foreach (MappingInfo mappingInfo in this.Mapping.MappingUniqueInfoCollection)
    {
      if (i == 0)
      {
        UniquePara.Append(perfix + (inculdeType ? GetDataType(mappingInfo, isEntity2Pk) + typeNameDivision : string.Empty) 
          + (includeName ? GetClassPropertyName(mappingInfo, isNameLowerCase, isEntity2Pk, entity2UniqueDivision) : string.Empty) + suffix);
      } 
      else
      {
        UniquePara.Append(paraDivision + perfix + (inculdeType ? GetDataType(mappingInfo, isEntity2Pk) + typeNameDivision : string.Empty) 
          + (includeName ? GetClassPropertyName(mappingInfo, isNameLowerCase, isEntity2Pk, entity2UniqueDivision) : string.Empty) + suffix);
      }
      i++;
    }
    return UniquePara.ToString();
  }
  
  public string GetDataType(MappingInfo mappingInfo, bool isEntity2Pk)
  {
    return isEntity2Pk ? (!Enum.IsDefined(typeof(com.Sconit.CodeSmith.DataType), mappingInfo.DataType) ? mappingInfo.PKMany2OnePropertyDataType : mappingInfo.DataType) : mappingInfo.DataType;
  }
  
  public string GetClassPropertyName(MappingInfo mappingInfo, bool isNameLowerCase, bool isEntity2Pk, string entity2PkDivision)
  {
    return isNameLowerCase? GenLowerCasePropertyName(
      (isEntity2Pk ? (mappingInfo.ClassPropertyName + ((mappingInfo.PKMany2OnePropertyName != null && mappingInfo.PKMany2OnePropertyName != string.Empty) ? (entity2PkDivision + mappingInfo.PKMany2OnePropertyName) : string.Empty)) : mappingInfo.ClassPropertyName)) : 
      (isEntity2Pk ? (mappingInfo.ClassPropertyName + ((mappingInfo.PKMany2OnePropertyName != null && mappingInfo.PKMany2OnePropertyName != string.Empty) ? (entity2PkDivision + mappingInfo.PKMany2OnePropertyName) : string.Empty)) : mappingInfo.ClassPropertyName);
  }
</script>
using System;
using System.Collections;
using System.Text;
using System.Collections.Generic;
using Castle.Services.Transaction;
using <%=this.NameSpace%>.Entity.<%=this.ModuleName %>;
using <%=this.NameSpace%>.Persistence.<%=this.ModuleName %>;

//TODO: Add other using statements here.

namespace <%=this.NameSpace%>.Service.<%=ModuleName%>.Impl
{
    [Transactional]
    public class <%=ClassName%>BaseMgr : SessionBase, I<%=ClassName%>BaseMgr
    {
        public I<%=ClassName%>Dao entityDao { get; set; }
        
        #region Method Created By CodeSmith

        [Transaction(TransactionMode.Requires)]
        public virtual void Create<%=ClassName%>(<%=ClassName%> entity)
        {
            entityDao.Create<%=ClassName%>(entity);
        }

        [Transaction(TransactionMode.Unspecified)]
        public virtual <%=ClassName%> Load<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", true, true, " ", true, false, string.Empty)%>)
        {
            return entityDao.Load<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, false, string.Empty)%>);
        }
    <%
      if (this.Mapping.MappingPKInfoCollectionCount > 1)
      {
    %>
    
        [Transaction(TransactionMode.Unspecified)]
        public virtual <%=ClassName%> Load<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", true, true, " ", true, true, string.Empty)%>)
        {
            return entityDao.Load<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, true, string.Empty)%>);
        }
    <%
      }
    %>

        [Transaction(TransactionMode.Unspecified)]
        public virtual IList<<%=ClassName%>> GetAll<%=ClassName%>()
        {
    <%
        if (this.Mapping.IncludeIsActiveField)
        {
    %>
            return entityDao.GetAll<%=ClassName%>(false);
    <%
        }else{
    %>  
            return entityDao.GetAll<%=ClassName%>();
    <%
        }
    %>
        }
    
    <%
      if (this.Mapping.IncludeIsActiveField)
      {
    %>
        [Transaction(TransactionMode.Unspecified)]
        public virtual IList<<%=ClassName%>> GetAll<%=ClassName%>(bool includeInactive)
        {
            return entityDao.GetAll<%=ClassName%>(includeInactive);
        }
    
    <%
      }
    %>
        [Transaction(TransactionMode.Requires)]
        public virtual void Update<%=ClassName%>(<%=ClassName%> entity)
        {
            entityDao.Update<%=ClassName%>(entity);
        }

        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", true, true, " ", true, false, string.Empty)%>)
        {
            entityDao.Delete<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, false, string.Empty)%>);
        }
    <%
      if (this.Mapping.MappingPKInfoCollectionCount > 1)
      {
    %>
        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", true, true, " ", true, true, string.Empty)%>)
        {
            entityDao.Delete<%=ClassName%>(<%=GenPKPara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, true, string.Empty)%>);
        }
    <%
      }
    %>

        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(<%=ClassName%> entity)
        {
            entityDao.Delete<%=ClassName%>(entity);
        }
        <%
      if (this.Mapping.MappingPKInfoCollectionCount == 1)
      {
    %>
    
        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(IList<<%=GenPKPara(string.Empty, string.Empty, ", ", true, false, string.Empty, false, false, string.Empty)%>> pkList)
        {
            entityDao.Delete<%=ClassName%>(pkList);
        }
    <%
      }
    %>

        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(IList<%= "<" + ClassName + ">"%> entityList)
        {
            if ((entityList == null) || (entityList.Count == 0))
            {
                return;
            }
            
            entityDao.Delete<%=ClassName%>(entityList);
        }   
    <%
      if (this.Mapping.MappingUniqueInfoCollectionCount > 0)
      {
    %>
        
        [Transaction(TransactionMode.Unspecified)]
        public virtual <%=ClassName%> Load<%=ClassName%>(<%=GenUniquePara(string.Empty, string.Empty, ", ", true, true, " ", true, false, string.Empty)%>)
        {
            return entityDao.Load<%=ClassName%>(<%=GenUniquePara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, false, string.Empty)%>);
        }
    
        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(<%=GenUniquePara(string.Empty, string.Empty, ", ", true, true, " ", true, true, string.Empty)%>)
        {
            entityDao.Delete<%=ClassName%>(<%=GenUniquePara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, true, string.Empty)%>);
        }   
    <%
      }
    %>
         <%
      if (this.Mapping.IsMappingUniqueContainObject)
      {
    %>
    
        [Transaction(TransactionMode.Unspecified)]
        public virtual <%=ClassName%> Load<%=ClassName%>(<%=GenUniquePara(string.Empty, string.Empty, ", ", true, true, " ", true, true, string.Empty)%>)
        {
            return entityDao.Load<%=ClassName%>(<%=GenUniquePara(string.Empty, string.Empty, ", ", false, true, string.Empty, true, true, string.Empty)%>);
        }
    <%
      }
    %>
    <%
      if (this.Mapping.MappingUniqueInfoCollectionCount == 1)
      {
    %>
        
        [Transaction(TransactionMode.Requires)]
        public virtual void Delete<%=ClassName%>(IList<<%=GenUniquePara(string.Empty, string.Empty, ", ", true, false, string.Empty, false, false, string.Empty)%>> UniqueList)
        {
            entityDao.Delete<%=ClassName%>(UniqueList);
        }   
    <%
      }
    %>
        #endregion Method Created By CodeSmith
    }
}
