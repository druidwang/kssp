<%@ CodeTemplate Language="C#" TargetLanguage="XML" Description="Generate entity class mapping xml file." %>
<%@ Property Name="ClassName" Type="String" Category="EntityClass" Description="The entity class name." %>
<%@ Property Name="ModuleName" Type="String" Category="ModuleGroup" Description="The module group which contains the entity, for example, Security." %>
<%@ Property Name="NameSpace" Type="String" Default="com.Sconit" Category="EntityClass" Description="The assembly that contains the entity class." %>
<%@ Property Name="TableName" Type="String" Category="Table" Description="The table name." %>
<%@ Property Name="Mapping" Type="com.Sconit.CodeSmith.MappingProperty" Category="Mapping" Description="The O/R mapping settings." %>
<%@ Assembly Name="com.Sconit.CodeSmith" %>
<%@ Import Namespace="com.Sconit.CodeSmith" %>
<%@ Import Namespace="System.Text" %>
<script runat="template">
	public string GenLengthClause(string dataType, int dataLength)
	{
		if (dataType == "String")
		{
			return " length=\"" + dataLength + "\"";
		}
		else
		{
			return string.Empty;
		}
	}
    
    public string GenUpdateClause(string columnName)
	{
		if (columnName == "CreateUser"
        || columnName == "CreateUserNm"
        || columnName == "CreateDate")
		{
			return " update=\"false\"";
		}
		else
		{
			return string.Empty;
		}
	}
    
    public string FirstCharacterToLowerCase(string target)
	{
		if (target == null || target.Length == 0)
			return string.Empty;
			
		char firstChar = target[0];
		firstChar = char.ToLower(firstChar);
		
		return firstChar + target.Substring(1);
	}
</script>
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2">
 	<class name="<%=NameSpace + "." + ModuleName + "." + ClassName%>, <%=NameSpace%>" table="<%=TableName%>" lazy="false">
	<%
		if (this.Mapping.MappingPKInfoCollectionCount == 1)
		{
			foreach (MappingInfo mappingInfo in this.Mapping.MappingPKInfoCollection)
			{
	%>
		<id name="<%=mappingInfo.ClassPropertyName%>" column="<%=mappingInfo.TableColumnName%>" type="<%=mappingInfo.DataType%>" unsaved-value="<%=mappingInfo.UnsavedValue%>" >
      		<generator class="<%=mappingInfo.PKGenerator%>" />
        </id>
	<%
			}
		} 
		else if (this.Mapping.MappingPKInfoCollectionCount > 1)
		{
	%>
		<composite-id>
	<%
			foreach (MappingInfo mappingInfo in this.Mapping.MappingPKInfoCollection)
			{
				if (mappingInfo.IsBaseDataType)
				{
	%>
			<key-property name="<%=mappingInfo.ClassPropertyName%>" column="<%=mappingInfo.TableColumnName%>" type="<%=mappingInfo.DataType%>" <%=GenLengthClause(mappingInfo.DataType, mappingInfo.DataLength)%> />
	<%
				} 
				else
				{
	%>
			<key-many-to-one name="<%=mappingInfo.ClassPropertyName%>" column="<%=mappingInfo.TableColumnName%>" class="<%=mappingInfo.DataType%>, <%=NameSpace + ".Entity"%>"/>
	<%
				}
			}
	%>
		</composite-id>
	<%
		}
	%>
    <% 
		foreach (MappingInfo mappingInfo in this.Mapping.MappingFieldInfoCollection)
		{
			if (mappingInfo.IsOne2Many)
			{
	%>
		<bag name="<%=mappingInfo.ClassPropertyName%>" table="<%=mappingInfo.One2ManyTable%>" inverse="<%=FirstCharacterToLowerCase(mappingInfo.One2ManyInverse.ToString())%>" lazy="<%=FirstCharacterToLowerCase(mappingInfo.One2ManyLazy.ToString())%>">
			<key column="<%=mappingInfo.One2ManyColumn%>" />
			<one-to-many class="<%=mappingInfo.DataType.ToString()%>, <%=NameSpace + ".Entity"%>" />
		</bag>
	<%
			}
			else if (mappingInfo.IsVersion)
			{			
	%>
		<version name="<%=mappingInfo.ClassPropertyName%>" column="<%=mappingInfo.TableColumnName%>" type="<%=mappingInfo.DataType.ToString()%>" />	
	<%
			}
			else if (mappingInfo.IsBaseDataType)
            {
	%>
		<property name="<%=mappingInfo.ClassPropertyName%>" column="<%=mappingInfo.TableColumnName%>" type="<%=mappingInfo.DataType.ToString()%>"<%=GenLengthClause(mappingInfo.DataType, mappingInfo.DataLength)%><%=GenUpdateClause(mappingInfo.TableColumnName)%>/>	
	<%                
            }
            else if(mappingInfo.ClassPropertyName =="CreateTime")
            {
	%>
        <property name="CreateTime" column="CreateTime" type="DateTime" update="false" insert="false"/>
	<%     
            }
            else
			{
	%>
		<many-to-one name="<%=mappingInfo.ClassPropertyName%>" column="<%=mappingInfo.TableColumnName%>" class="<%=mappingInfo.DataType.ToString()%>, <%=NameSpace + ".Entity"%>" cascade="none" lazy="proxy" />
	<%
			}
		}
	%>
  	</class>
</hibernate-mapping>
