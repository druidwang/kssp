@model IEnumerable<com.Sconit.Entity.ORD.OrderDetail>
<fieldset>
<script type="text/javascript">
    $(function () {
        $("#checkAll").click(function () {
            $('input[name="Id"]').attr("checked", this.checked);
            var $checkRecords = $("input[name='Id']");
            var showButton = false;
            for (var i = 0; i < $checkRecords.length; i++) {
                if ($checkRecords[i].checked) {
                    showButton = true;
                    break;
                }
            }
            $("#btnEdit").attr("style", showButton ? "display:inline" : "display:none");
        });
    });



    function showButtons() {
        var $checkRecords = $("input[name='Id']");
        var showButton = false;
        for (var i = 0; i < $checkRecords.length; i++) {
            if ($checkRecords[i].checked) {
                showButton = true;
                break;
            }
        }
        $("#checkAll").attr("checked", $checkRecords.length == $("input[name='Id']:checked").length ? true : false);
        $("#btnEdit").attr("style", showButton ? "display:inline" : "display:none");
    }
</script>
    <legend>@Resources.ORD.OrderDetail.OrderDetail_Title</legend>
    @using (Html.BeginForm())
    { 
        @(Html.Telerik().Grid(Model)
        .Name("OrderDetail")
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .Columns(columns =>
        {
            columns.Bound(o => o.Id).HeaderTemplate("<input type='checkbox' id='checkAll' name='checkAll' />");
            columns.Bound(o => o.OrderNo);
            columns.Bound(o => o.ExternalOrderNo);
            columns.Bound(o => o.Sequence);
            columns.Bound(o => o.Item);
            columns.Bound(o => o.ReferenceItemCode);
            columns.Bound(o => o.ItemDescription);
            columns.Bound(o => o.Uom);
            columns.Bound(o => o.UnitCount).Format("{0:0.########}");
            columns.Bound(o => o.LocationFrom).EditorTemplateName("LocationGridForeignKey").Width(120);
           // columns.Bound(o => o.LocationToName);
            columns.Bound(o => o.OrderedQty).Format("{0:0.########}");

            columns.Bound(o => o.CurrentReceiveQty).Format("{0:0.########}");
        })
                 .CellAction(cell =>
                 {
                     if (cell.Column.Member == "Id")
                     {
                         cell.Text = string.Format("<input type='checkbox' id='Id' name='Id'  onClick='showButtons()' value='" + cell.DataItem.Id + "'/>");
                     }
                     if (cell.Column.Member == "CurrentReceiveQty")
                     {
                         cell.Text = string.Format("<input type='text' id='CurrentReceiveQty' name='CurrentReceiveQty' style='width:70px' value='" + (cell.DataItem.OrderedQty - cell.DataItem.ReceivedQty).ToString().TrimEnd(new char[]{'0','.'}) + "'/>");
                     }
                 })
        .Scrollable(c => c.Enabled(false))
                .Resizable(resizing => resizing.Columns(true))
        .Footer(false)
    )
      
    }
</fieldset>
