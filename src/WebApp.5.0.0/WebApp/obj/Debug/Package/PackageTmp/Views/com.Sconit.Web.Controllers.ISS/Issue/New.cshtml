@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.ISS.IssueMaster
@{
    ViewBag.Title = Resources.ISS.IssueMaster.New_Title;
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_Issue_New" });
}
<script type="text/javascript">
    function IssueType_Change(e) {
        $("#IssueNoCode").data("tDropDownList").reload();
    }
    function IssueNo_Change(e) {
        var data = {
            issueType: $("#IssueTypeCode").val()
        };
    }
    function IssueNo_DataBinding(e) {
        e.data = {
            issueType: $("#IssueTypeCode").val()
        };
    }
    /*
    function IssueAddress_Change(e) {
        alert($("#IssueAddress-input").val());
        $("#IssueAddress").text($("#IssueAddress-input").val());
        alert($("#IssueAddress").val());
    }
    */
    $(function () {

        $("#IssueAddress-input").change(function () {
            $("#IssueAddress").val($("#IssueAddress-input").val());
        });
    });
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.ISS.IssueMaster.New_Title</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IssueSubject)
            </div>
            <div class="editor-field-2">
                @Html.TextBoxFor(model => model.IssueSubject,  new { style = "width:80%;" })
                @Html.ValidationMessageFor(model => model.IssueSubject)
            </div>
            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="search-field">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.IssuePriority,
        controlName = "Priority",
        includeBlankOption = false,
        blankOptionDescription = CodeDetail.SpecialValueEnum.BlankValue,
        blankOptionValue = "",
        selectedValue = Model != null ? (int)Model.Priority : 0
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Type)
            </div>
            <div class="search-field">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.IssueType,
        controlName = "Type",
        includeBlankOption = false,
        blankOptionDescription = CodeDetail.SpecialValueEnum.BlankValue,
        blankOptionValue = "",
        selectedValue = Model != null ? (int)Model.Type : 0
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IssueAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_IssueAddressComboBox", "Common",
                new { controlName = "IssueAddress",
                    selectedValue = Model!=null?Model.IssueAddress:string.Empty, 
                    enable = true });
                }
                @Html.ValidationMessageFor(model => model.IssueAddress)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IssueTypeCode)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_IssueTypeDropDownList", "Common", new
    {
        controlName = "IssueTypeCode",
        includeBlankOption = false,
        coupled = true,
        selectedValue = Model != null ? Model.IssueTypeCode : string.Empty
    });
                }
                @Html.ValidationMessageFor(model => model.IssueTypeCode)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BackYards)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.BackYards)
                @Html.ValidationMessageFor(model => model.BackYards)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IssueNoCode)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_IssueNoDropDownList", "Common", new
    {
        controlName = "IssueNoCode",
        includeBlankOption = true,
        isChange = true,
        selectedValue = Model != null ? Model.IssueNoCode : "0"
    });
                }
                @Html.ValidationMessageFor(model => model.IssueNoCode)
            </div>
            <div class="multilinetext-label-1">
                @Html.LabelFor(model => model.Content)
            </div>
            <div class="multilinetext-field-1">
                @Html.TextAreaFor(model => model.Content, new { rows = 3, style = "min-height:0;width:80%" })
                @Html.ValidationMessageFor(model => model.Content)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.UserName)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.UserName)
                @Html.ValidationMessageFor(model => model.UserName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Email)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.MobilePhone)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.MobilePhone)
                @Html.ValidationMessageFor(model => model.MobilePhone)
            </div>
            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
                @Html.CheckBoxFor(model => model.ReleaseIssue)
                @Html.LabelFor(model => model.ReleaseIssue)
                @Html.CheckBoxFor(model => model.ContinuousCreate)
                @Html.LabelFor(model => model.ContinuousCreate)
            </div>
        </div>
        <div class="editor-footer">
            <button type="submit" id="btnNew">
                @Resources.SYS.Global.Button_New</button>
            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/Issue/List")'">
                @Resources.SYS.Global.Button_Back</button>
        </div>
    </fieldset>
}