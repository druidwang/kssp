@model IEnumerable<com.Sconit.Entity.ORD.IpLocationDetail>
<script type="text/javascript">
    $(function () {
        $("#checkAll").click(function () {
            $('input[name="checkedRecords"]').attr("checked", this.checked);
            showButtons();
        });
        var $checkedRecords = $("input[name='checkedRecords']");
        $checkedRecords.click(function () {
            $("#checkAll").attr("checked", $checkedRecords.length == $("input[name='checkedRecords']:checked").length ? true : false);
        });
    });

    function showButtons() {
        var $checkRecords = $("input[name='checkedRecords']");
        var count = 0;
        for (var i = 0; i < $checkRecords.length; i++) {
            if ($checkRecords[i].checked) {
                count++;
            }
        }
        $("#btnHuReceive").attr("style", count > 0 ? "display:inline" : "display:none");

    }
</script>
<fieldset>
    <legend>@Resources.ORD.IpDetail.IpDetail_Title</legend>
    @(
 Html.Telerik().Grid(Model)
          .Name("OrderMasterGrid")
          .DataKeys(keys =>
          {
              keys.Add(p => p.Id);
          })
          .Columns(columns =>
          {
              columns.Bound(o => o.Id).Hidden()
               .ClientTemplate("<input type='checkbox' id='checkedRecords' name='checkedRecords' value='<#= Id #>' onClick='showButtons()'  />")
               .HeaderTemplate("<input type='checkbox' id='checkAll' name='checkAll'  />")
               .Width(36).HtmlAttributes(new { style = "text-align:center" });
              columns.Bound(o => o.IpNo).ReadOnly();
              columns.Bound(o => o.Item).ReadOnly();
          
              columns.Bound(o => o.HuId);
              columns.Bound(o => o.LotNo);
              columns.Bound(o => o.Qty);
          })
          .CellAction(cell =>
          {
              if (cell.Column.Member == "Id")
              {
                  cell.Text = string.Format("<input type='checkbox' id='checkedRecords' name='checkedRecords' value='"+cell.DataItem.Id+"' onClick='showButtons()'  />");
              }
              
              }

          )
          .Scrollable(c => c.Enabled(false))
        .EnableCustomBinding(true)
        .Pageable(settings =>
        {
            settings.Total(ViewBag.Total == null ? 0 : ViewBag.Total);
            settings.PageSize(ViewBag.PageSize == null ? 50 : ViewBag.PageSize);
        })
        .Sortable()
        .Footer(false)
        .Resizable(resizing => resizing.Columns(true))
    )
</fieldset>
