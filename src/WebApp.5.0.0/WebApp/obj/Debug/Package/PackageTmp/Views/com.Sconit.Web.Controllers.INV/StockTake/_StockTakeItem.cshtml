@using com.Sconit.Entity.MD;
@using com.Sconit.Entity.INV;
@model IEnumerable<com.Sconit.Entity.INV.StockTakeItem>
           
@Html.Partial("_AjaxMessage") 

<script type="text/javascript">
    function onItemComboBoxChange(e) {
        if (e.value != null) {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                $(e.target).parent().parent().next().text("");
                combobox.reload();
            } else {
                var data = {
                    "Item": e.value
                };
                $.ajax({
                    type: "post",
                    dataType: "html",
                    url: "/StockTake/_ItemDescription/",
                    data: data,
                    success: function (data, textStatus) {
                        $(e.target).parent().parent().next().text(data);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                });
            }
        }
    }
    function onDataBound() {
        $("#StockTakeItem > tr.t-no-data td").html("@Resources.GridLocalization.NoRecords");
        }
</script>
<fieldset>
    <legend>@Resources.INV.StockTake.StockTake_Tab_Items</legend>
    @(Html.Telerik().Grid(Model)
        .Name("StockTakeItem")
         .ToolBar(commands => {
             if (ViewBag.Status == com.Sconit.CodeMaster.StockTakeStatus.Create.ToString())
             {
                 commands.Insert();
             }
         })
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .DataBinding(dataBinding => dataBinding.Ajax()
                .Select("_SelectItem", "StockTake", new { stNo = ViewBag.StNo })
                .Insert("_InsertItem", "StockTake", new { stNo = ViewBag.StNo })
                .Update("_UpdateItem", "StockTake")
                .Delete("_DeleteItem", "StockTake", new { stNo = ViewBag.StNo }))
        .Columns(columns =>
        {
            if (ViewBag.Status == com.Sconit.CodeMaster.StockTakeStatus.Create.ToString())
            {
               // columns.ForeignKey(o => o.Item, (IEnumerable<Item>)ViewData["Item"], "Code", "Code");
                columns.Bound(o => o.Item).EditorTemplateName("ItemGridForeignKey").Width(120);
            }
            else
            {
                columns.Bound(o => o.Item).ReadOnly();
            }
            columns.Bound(o => o.ItemDescription).ReadOnly();
            if (ViewBag.Status == com.Sconit.CodeMaster.StockTakeStatus.Create.ToString())
            {
                columns.Command(commands =>
                {
                    commands.Edit();
                    commands.Delete();
                }).Width(150);
            }
        })
        .NoRecordsTemplate("Loading...")
        .ClientEvents(e => e.OnDataBound("onDataBound"))
        .Scrollable(c => c.Enabled(false))
        .Sortable()
        .Footer(false)
 )
</fieldset>
