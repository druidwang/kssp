@model com.Sconit.Entity.ORD.MiscOrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_ProductionReworkMiscOrder_New" });
}
<script type="text/javascript">
    function onCreate() {
        //debugger
        var grid = $("#MiscOrderDetailGrid").data("tGrid");
        if (grid == null) {
            $message.error('明细不能为空。');
            return;
        }

        if ($("#EffectiveDate").val() == "") {
            $message.error('生效日期为必填项。');
            return;
        }

        if ($("#Location").val() == "") {
            $message.error('库位为必填项。');
            return;
        }

        if ($("#MoveType").val() == "") {
            $message.error('移动类型为必填项。');
            return;
        }

        if ($("#QualityType").val() == "") {
            $message.error('质量状态为必填项。');
            return;
        }

        if ($("#Note").val() == "") {
            $message.error('原因为必填项。');
            return;
        }
        var miscmstr = {
            "MiscOrderNo": $("#MiscOrderNo").val(),
            "MoveType": $("#MoveType").val(),
            "Flow": $("#Flow").val(),
            "EffectiveDate": $("#EffectiveDate").val(),
            "Note": $("#Note").val(),
            "MoveType": $("#MoveType").val(),
            "QualityType": $("#QualityType").val()
        }

        var sequences = new Array();
        var items = new Array();
        var qtys = new Array();
        var locations = new Array();
        var rows = grid.$tbody.children("tr:not(.t-no-data)").filter("tr:visible");
        var i = 0;
        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            if ($.trim(row[0].childNodes[1].innerText) != "" && parseFloat($.trim(row[0].childNodes[5].innerText)) != 0) {
                sequences[i] = $.trim(row[0].childNodes[0].innerText);
                items[i] = $.trim(row[0].childNodes[1].innerText);
                qtys[i] = $.trim(row[0].childNodes[5].innerText);
                locations[i] = $.trim(row[0].childNodes[6].innerText);
                i++;
            }
        }

        var made = {
            "sequences": sequences,
            "items": items,
            "qtys": qtys,
            "locations": locations
        }

        $.ajax({
            type: "post",
            dataType: "text",
            url: "/ProductionReworkMiscOrder/CreateMiscOrder/",
            data: $.extend(made, miscmstr),
            cache: false,
            traditional: true,
            success: function (data) {
                $("#content").html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function MoveType_Change(e) {
        Flow_Change(e);
    }

    function Flow_Change(e) {
        var combobox = $("#Flow").data("tComboBox");
        if (combobox == undefined) {
            return;
        }
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            combobox.reload();
        } else {
            var data = {
                "flow": $("#Flow").val(),
                "moveType": $("#MoveType").val()
            };
            $.ajax({
                type: "get",
                dataType: "text",
                url: "/ProductionReworkMiscOrder/_GetMiscOrderLocation/",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    document.getElementById("miscOrderLocation").innerHTML = "<label>" + data + "</label>";
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(errorThrown);
                }
            });
        }
    }
</script>
<fieldset>
    <legend>@Resources.ORD.IpMaster.IpMaster_BaseInfo</legend>
    <div class="editor">
        <div class="editor-label-2">
            @Html.LabelFor(model => model.MoveType)
        </div>
        <div class="search-field">
            @{
                Html.RenderAction("_MoveTypeDropDownList", "Common", new
                    {
                        //IOType = (int)com.Sconit.CodeMaster.MiscOrderType.GI,
                        SubType = (int)com.Sconit.CodeMaster.MiscOrderSubType.SY04,
                        isChange = true,
                        controlName = "MoveType",
                        blankOptionValue = "",
                        selectedValue = Model != null && Model.MoveType != null ? Model.MoveType : string.Empty
                    });
            }
            @Html.ValidationMessageFor(model => model.MoveType)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.EffectiveDate)
        </div>
        <div class="editor-field-2">
            @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("EffectiveDate").Value(DateTime.Now)
             .Min(DateTime.Now.AddDays(-30)).Max(DateTime.Now)
            .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            @Html.ValidationMessageFor(model => model.EffectiveDate)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Flow)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_FlowComboBox", "Common", new
                {
                    controlName = "Flow",
                    isChange = true,
                    type = (int)com.Sconit.CodeMaster.OrderType.Production,
                    //resourceGroup = (int)com.Sconit.CodeMaster.ResourceGroup.MI,
                    selectedValue = Model != null ? Model.Flow : null,
                });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Location)
        </div>
        <div class="search-field" id="miscOrderLocation">
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.QualityType)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common", new
                   {
                       code = com.Sconit.CodeMaster.CodeMaster.QualityType,
                       controlName = "QualityType",
                       selectedValue = Model != null ? ((int)Model.QualityType).ToString() : null,
                       //includeBlankOption = true
                   });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Note)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.Note)
        </div>
        <div class="editor-footer">
            @Html.Button(Resources.SYS.Global.Button_New, "Url_ProductionReworkMiscOrder_New", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onCreate()"}
	        })
        </div>
    </div>
</fieldset>
@{
    Html.RenderAction("_MiscOrderDetail", "ProductionReworkMiscOrder", new { miscOrderNo = string.Empty });
}
