@model com.Sconit.Entity.ORD.OrderMaster
<script type="text/javascript">
  

//    function More(va) {
//        if (va.innerHTML == "More...") {
//            document.getElementById("divMore").style.display = 'inline'
//            document.getElementById("more").innerHTML = "Hide...";
//        }
//        else {
//            document.getElementById("divMore").style.display = 'none'
//            document.getElementById("more").innerHTML = "More...";
//        }
//    }


</script>

    
    <div id="divMore" style="display: none">
    <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_BaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.OrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsOpenOrder)
            </div>
            <div class="editor-field-2">
 
                    @Html.CheckBoxFor(model => model.IsOpenOrder, new { disabled = true })
 
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Sequence)
            </div>
            <div class="editor-field-2">

    
                    @Html.DisplayFor(model => model.Sequence)
   
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderPriority,
            controlName = "Priority",
            selectedValue = Model != null ? (int)Model.Priority : 0,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Type)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.OrderType,
        controlName = "Type",
        selectedValue = Model != null ? (int)Model.Type : 0,
        enable = false
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ExternalOrderNo)
            </div>

            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.StartTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.WindowTime, (String)ViewBag.editorTemplate)
            </div>
          
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyFromName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFromName)
                @Html.Hidden("PartyFrom", Model.PartyFrom)
                @Html.Hidden("PartyTo", Model.PartyTo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyToName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyToName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFromAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipFrom",
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model.ShipFrom,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipTo",
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model.ShipTo,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFromContact)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromContact)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToContact)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipToContact)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFromTel)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromTel)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToTel)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipToTel)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.LocationFromName)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
     new
     {
         ControlId = "MasterLocationFrom",
         controlName = "LocationFrom",
         selectedValue = Model.LocationFrom,
         checkRegion = true,
         enable = false
     });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.LocationToName)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
     new
     {
         ControlId = "MasterLocationTo",
         controlName = "LocationTo",
         selectedValue = Model.LocationTo,
         checkRegion = true,
         enable = false
     });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Dock)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Dock, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BillAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "BillAddress",
            selectedValue = Model.BillAddress,
            checkParty = true,
            type = (int)com.Sconit.CodeMaster.AddressType.BillAddress,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PriceList)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_PriceListComboBox", "Common",
        new
        {
            controlName = "PriceList",
            selectedValue = Model.PriceList,
            checkParty = true,
            enable = false,
            isChange = true
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BillTerm)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderBillTerm,
            controlName = "BillTerm",
            isConsignment = false,
            selectedValue = Model != null ? (int)Model.BillTerm : -1,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Currency)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CurrencyDropDownList", "Common",
        new { controlName = "Currency", selectedValue = Model.Currency, enable = false });
                }
            </div>
              <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderStatus,
            controlName = "Status",
            selectedValue = Model != null ? (int)Model.Status : 0,
            enable = false
        });
                }
            </div>
        </div>
    </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_Audit</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReleaseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.ReleaseDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.StartUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.StartUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.StartDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.StartDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CancelUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CancelUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CancelDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CancelDate)
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_BarCodeOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.HuTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.HuTemplate,
            controlName = "HuTemplate",
            selectedValue = Model.HuTemplate,
            enable = false
        });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsReceiveScanHu)
                </div>
                <div class="editor-field-2">
             
                        @Html.CheckBoxFor(model => model.IsReceiveScanHu, new { disabled = true })
 
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsShipScanHu)
                </div>
                <div class="editor-field-2">
                 
                        @Html.CheckBoxFor(model => model.IsShipScanHu, new { disabled = true })
  
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsReceiveFifo)
                </div>
                <div class="editor-field-2">
                    
           
                        @Html.CheckBoxFor(model => model.IsReceiveFifo, new { disabled = true })
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_PrintOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintOrder)
                </div>
                <div class="editor-field-2">
                        @Html.CheckBoxFor(model => model.IsPrintOrder, new { disabled = true })
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.OrderTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate, controlName = "OrderTemplate", selectedValue = Model.OrderTemplate, enable = false });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintAsn)
                </div>
                <div class="editor-field-2">
                        @Html.CheckBoxFor(model => model.IsPrintAsn, new { disabled = true })
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.AsnTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.AsnTemplate, controlName = "AsnTemplate", selectedValue = Model.AsnTemplate, enable = false });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintReceipt)
                </div>
                <div class="editor-field-2">
                        @Html.CheckBoxFor(model => model.IsPrintReceipt, new { disabled = true })
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReceiptTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate, controlName = "ReceiptTemplate", selectedValue = Model.ReceiptTemplate, enable = false });
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_OrderControl</legend>
            <div class="editor">
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsOrderFulfillUC)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsOrderFulfillUC, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsShipFulfillUC)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsShipFulfillUC, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsReceiveFulfillUC)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsReceiveFulfillUC, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsManualCreateDetail)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsManualCreateDetail, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsListPrice)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsListPrice, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsCreatePickList)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsCreatePickList, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsShipByOrder)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsShipByOrder, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsReceiveExceed)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsReceiveExceed, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsShipExceed)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsShipExceed, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAsnUniqueReceive)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsAsnUniqueReceive, new { disabled = true })
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_AutomaticControl</legend>
            <div class="editor">
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoRelease)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsAutoRelease, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoStart)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsAutoStart, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoShip)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsAutoShip, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoReceive)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsAutoReceive, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoBill)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsAutoBill, new { disabled = true })
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsInspect)
                </div>
                <div class="editor-field-3">
                        @Html.CheckBoxFor(model => model.IsInspect, new { disabled = true })
                </div>
            </div>
        </fieldset>
    </div>
    <div>
        <a type="text/html" onclick="More()" href="#" id="more">More... </a>
    </div>
    <div class="search-footer">
   <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProcurementSQOrder/List")'">@Resources.SYS.Global.Button_Back</button>
   </div>
@{
    Html.RenderAction("_OrderDetailList", "ProcurementSQOrder", new { flow = Model.Flow, orderNo = Model.OrderNo, orderSubType = (int)Model.SubType });
}
