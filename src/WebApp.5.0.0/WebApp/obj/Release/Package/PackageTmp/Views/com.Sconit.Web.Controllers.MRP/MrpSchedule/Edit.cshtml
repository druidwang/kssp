@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.MRP.TRANS.MrpPlanMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = Model.SiteMapPath });
}
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.MRP.RccpPlanMaster.RccpPlanMaster_Edit_Title</legend>
        <div class="editor">
            @Html.HiddenFor(model => model.PlanVersion)
            @Html.HiddenFor(model => model.CreateUserName)
            @Html.HiddenFor(model => model.CreateDate)
            @Html.HiddenFor(model => model.CreateUserId)
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PlanVersion)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PlanVersion)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.SnapTime)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.SnapTime)
            </div>
            <div class="editor-label-2">
                <label>来源版本</label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.SourcePlanVersion)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.MessageType,
        controlName = "Status",
        includeBlankOption = true,
        enable = false,
        selectedValue = (int)Model.Status
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateUserName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateUserName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateDate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsRelease)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsRelease)
                @Html.HiddenFor(model => model.IsRelease)
                @Html.HiddenFor(model => model.DateIndex)
                @Html.HiddenFor(model => model.ResourceGroup)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.DateIndex)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.DateIndex)
                @Html.HiddenFor(model => model.DateIndex)
            </div>
        </div>
        <div class="editor-footer">
            @{
    if (Model.Status != com.Sconit.CodeMaster.MessageType.Error)
    {

        if (Model.IsRelease)
        {
                @Html.Button(Resources.SYS.Global.Button_Cancel, Model.SiteMapPath, new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnSubmit"},
                {"needconfirm","true"},
                {"onclick","OnSave()"}
            }) 
        }
        else
        {
                @Html.Button(Resources.SYS.Global.Button_Submit, Model.SiteMapPath, new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnSubmit"},
                {"needconfirm","true"},
                {"onclick","OnSave()"}
            }) 
        }
    }
                <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/MrpSchedule/"+Model.ShortWord+"List")'">@Resources.SYS.Global.Button_Back</button>
            }
        </div>
    </fieldset>
    Html.RenderAction("_MrpPlanMasterError", "MrpSchedule", new { planVersion = Model.PlanVersion });
}
<script type="text/javascript">
    function OnSave() {
        var data = {
            "planVersion": $("#PlanVersion").val(),
            "isRelease": $("#IsRelease").val().toUpperCase() == "FALSE"
        };
        $.ajax({
            type: "post",
            dataType: "html",
            url: "/MrpSchedule/Save/",
            data: data,
            cache: false,
            success: function (data, textStatus) {
                var $tGrid = $("#content");
                $($tGrid).html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    var data = {
        "planVersion": $("#PlanVersion").val(),
        "isRelease": $("#IsRelease").val().toUpperCase() == "FALSE"
    };
    function back() {
        

        if ($("#ResourceGroup") == 10) {
            var ref = "~/MrpSnap/MiList"
        }
        else if ($("#ResourceGroup") == 20) {
            var ref = "~/MrpSnap/ExList"
        }
        else {
            var ref = "~/MrpSnap/FiList"
        }
        location.href = ref;
    }
    function ReleaseExPlan() {
        var data = {
            "planVersion": $("#PlanVersion").val(),
            "isRelease": $("#IsRelease").val().toUpperCase() == "FALSE"
        };
        $.ajax({
            type: "post",
            dataType: "html",
            url: "/MrpSchedule/ReleaseExPlan/",
            data: data,
            cache: false,
            success: function (data, textStatus) {
                var $tGrid = $("#content");
                $($tGrid).html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>
