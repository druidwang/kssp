@using com.Sconit.Entity.MD;
@model IEnumerable<com.Sconit.Entity.ORD.OrderDetail>
<script type="text/javascript">

    function onItemComboBoxChange(e) {

        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
            else {
                if (e.value != null) {
                    var data = {
                        "flow": $("#currentFlow").val().toString(),
                        "itemCode": e.value,
                        "orderSubType": $("#orderSubType").val()
                    };
                    $.ajax({
                        type: "post",
                        dataType: "json",
                        url: "/ProcurementOrder/_WebOrderDetail/",
                        data: data,
                        success: function (data, textStatus) {
                            var $tGrid = $("#OrderDetail").data("tGrid");
                            var $itemCell = $(e.target).parent().parent();
                            $itemCell.next().html(data.ItemDescription);
                            $itemCell.next().next().html(data.ReferenceItemCode);
                            $itemCell.next().next().next().html('<span class="t-dirty"></span>' + data.UnitCount);
                            $itemCell.next().next().next().next().html('<span class="t-dirty"></span>' + data.Uom);
                            if (data.UnitCountDescription != null) {
                                $itemCell.next().next().next().next().next().html('<span class="t-dirty"></span>' + data.UnitCountDescription);
                            }
                            if (!isProcurement) {
                                $itemCell.next().next().next().next().next().next().html('<span class="t-dirty"></span>' + data.LocationFrom);
                                $itemCell.next().next().next().next().next().next().next().html('<span class="t-dirty"></span>' + data.LocationTo);
                            }
                            else {
                                $itemCell.next().next().next().next().next().next().html('<span class="t-dirty"></span>' + data.LocationTo);
                            }
                            //$itemCell.next().next().next().next().next().next().next().next().html('<span class="t-dirty"></span>' + 0.00);
                            var oldData = $tGrid.dataItem($itemCell.parent());

                            if (oldData != undefined) {
                                oldData.Sequence = data.Sequence;
                                oldData.ItemDescription = data.ItemDescription;
                                oldData.Uom = data.Uom;
                                oldData.UnitCount = data.UnitCount;
                                oldData.MinUnitCount = data.MinUnitCount;
                                oldData.UnitCountDescription = data.UnitCountDescription;

                                oldData.ReferenceItemCode = data.ReferenceItemCode;
                                oldData.LocationFrom = data.LocationFrom;
                                oldData.LocationTo = data.LocationTo;
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            alert(errorThrown);
                        }
                    });
                }
            }
        }
    }

    function onLocationFromComboBoxChange(e) {
        if (e.value != null) {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
        }
    }

    function onLocationFromDataBinding(e) {
        e.data = {
            "Region": $("#PartyFrom").val(),
            "checkRegion": true
        };
    }

    function onLocationToComboBoxChange(e) {
        if (e.value != null) {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
        }
    }

    function onLocationToDataBinding(e) {
        e.data = {
            "Region": $("#PartyTo").val(),
            "checkRegion": true
        };
    }

    function onSaveDetail(e) {
        var grid = $("#OrderDetail").data("tGrid");
        if (grid == null) {
            alert("明细不能为空");
            return;
        }
        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
        var ordermstr = {
            "orderSubType": $("#orderSubType").val(),
            "orderNo": $("#OrderNo").val(),
            "flow": $("#currentFlow").val()
        };
        grid._convert(oderDetails);
        $.ajax({
            type: "post",
            dataType: "Json",
            url: "/ProcurementOrder/_SaveBatchEditing/",
            data: $.extend(oderDetails, ordermstr),
            success: function (data, ordermstr) {
                $message.success(data.SuccessMessage);
                if (data != "") {
                    var orderData = {
                        "orderNo": $("#OrderNo").val()
                    };
                    $.ajax({
                        type: "get",
                        dataType: "html",
                        url: "/ProcurementOrder/_Edit/",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            var tabStrip = $("#TabStrip");
                            var tabStripContent1 = tabStrip.data("tTabStrip").getContentElement(0);
                            $(tabStripContent1).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;

                $message.error(errorMessages);
            }
        });
    }
    function ItemComboBox_DataBinding(e) {
        if (e.value != "") {
            e.data = {
                "flow": $("#currentFlow").val().toString()
            }
        }
    }

    function onRowDataBound(e) {
        var row = $(e.row.childNodes);
        //$(e.row).find("#RequiredQty").text(e.dataItem.RequiredQty);
        if (e.dataItem.RequiredQty > 0) {
            $(e.row).find("td")[2].onclick = function (e) {
                e.stopPropagation();
            };
        }
    }

</script>
<fieldset>
    <legend>@Resources.ORD.OrderDetail.OrderDetail_Title</legend>
    @(Html.Telerik().Grid(Model)
        .Name("OrderDetail")
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .Editable(editing => editing.Mode(GridEditMode.InCell))
        .ToolBar(commands =>
        {
            if ((bool)ViewBag.isManualCreateDetail && ViewBag.Status == com.Sconit.CodeMaster.OrderStatus.Create)
            {
                commands.Insert();
            }
            if (!string.IsNullOrEmpty(ViewBag.OrderNo) && ViewBag.Status == com.Sconit.CodeMaster.OrderStatus.Create)
            {
                //commands.SubmitChanges();
                commands.Custom().Text(@Resources.SYS.Global.Button_SaveDetail).HtmlAttributes(new { onClick = "onSaveDetail()", href = "#" });
            }
        })
        .DataBinding(dataBinding =>
            dataBinding.Ajax()
            .Select("_SelectDetailFromPlan", "ProcurementOrder", new
            {
                Flow = @ViewBag.Flow,
                WindowTime = @ViewBag.WindowTime,
                PlanVersion = @ViewBag.PlanVersion,
                MaterialsGroup = @ViewBag.MaterialsGroup,
                Item = @ViewBag.Item,
                CheckedItems = @ViewBag.CheckedItems
            })
        )
        .Columns(columns =>
        {
            columns.Bound(o => o.Id).Hidden();//0
            columns.Bound(o => o.Sequence).Width(57)
                .ReadOnly(ViewBag.status != com.Sconit.CodeMaster.OrderStatus.Create || !ViewBag.isManualCreateDetail).Width(60);
            //2
            if (ViewBag.isManualCreateDetail && ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Create)
            {
                columns.Bound(o => o.Item).EditorTemplateName("ItemFilterByFlow").Width(120)
                .ClientTemplate("<input type='checkbox' id='checkedRecords' name='checkedRecords' onClick='showButtons();' value='<#= Item #>'   />")
                .HeaderTemplate("<input type='checkbox' id='checkAll' name='checkAll' />")
                .Width(36).HtmlAttributes(new { style = "text-align:center" });
                columns.Bound(o => o.Item).EditorTemplateName("ItemFilterByFlow").Width(120);
            }
            else
            {
                columns.Bound(o => o.Item).ReadOnly().Width(50)
                .ClientTemplate("<input type='checkbox' id='checkedRecords' name='checkedRecords' onClick='showButtons();' value='<#= Item #>'   />")
                .HeaderTemplate("<input type='checkbox' id='checkAll' name='checkAll' />")
                .Width(36).HtmlAttributes(new { style = "text-align:center" });
                columns.Bound(o => o.Item).EditorTemplateName("ItemFilterByFlow").Width(120);                
            }
            //3
            columns.Bound(o => o.ItemDescription).ReadOnly();
            //4
            columns.Bound(o => o.ReferenceItemCode).ReadOnly();
            //5
            columns.Bound(o => o.UnitCount).Width(57)
                .ReadOnly(ViewBag.status != com.Sconit.CodeMaster.OrderStatus.Create || !ViewBag.isManualCreateDetail).Format("{0:0.###}");
            //7
            if (false && ViewBag.isManualCreateDetail && ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Create)
            {
                columns.ForeignKey(o => o.Uom, (IEnumerable<Uom>)ViewData["uoms"], "Code", "Code").Width(120);
            }
            else
            {
                columns.Bound(o => o.Uom).ReadOnly();
            }
            //6
            columns.Bound(o => o.UnitCountDescription).ReadOnly();
            //8,9
            if (false && ViewBag.isManualCreateDetail && ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Create)
            {
                if (!ViewBag.IsProcurement)
                {
                    columns.Bound(o => o.LocationFrom).EditorTemplateName("LocationFromGridForeignKey").Width(120)
                        .ClientTemplate("<div title=<#=LocationFromName #>><#=LocationFrom #></div>");
                }
                columns.Bound(o => o.LocationTo).EditorTemplateName("LocationToGridForeignKey").Width(120)
                    .ClientTemplate("<div title=<#=LocationToName #>><#=LocationTo #></div>");
            }
            else
            {
                if (!ViewBag.IsProcurement)
                {
                    columns.Bound(o => o.LocationFrom).ReadOnly(true).Width(50);
                }
                columns.Bound(o => o.LocationTo).ReadOnly(true).Width(50);
            }
            //10
            if (ViewBag.IsListPrice && false)
            {
                columns.Bound(o => o.UnitPrice).Width(60).ReadOnly(ViewBag.status != com.Sconit.CodeMaster.OrderStatus.Create);
            }
            columns.Bound(o => o.MaxStock).ReadOnly(true).Format("{0:0.###}");
            columns.Bound(o => o.InvQty).ReadOnly(true).Format("{0:0.###}");
            columns.Bound(o => o.InTransQty).ReadOnly(true).Format("{0:0.###}");
            //11
            if (ViewBag.status != com.Sconit.CodeMaster.OrderStatus.Create)
            {
                columns.Bound(o => o.Direction).Width(60).ReadOnly();
            }
            else
            {
                columns.Bound(o => o.Direction).EditorTemplateName("HuToGridComboBox").Width(120);
            }
            //11
            columns.Bound(o => o.RequiredQty).Width(70).ReadOnly(true).Format("{0:0.###}");
            columns.Bound(o => o.OrderedQty).Width(70).ReadOnly(ViewBag.status != com.Sconit.CodeMaster.OrderStatus.Create);
            if (ViewBag.status == com.Sconit.CodeMaster.OrderStatus.InProcess)
            {
                columns.Bound(o => o.ShippedQty).ReadOnly().Format("{0:0.###}").Width(60);
                columns.Bound(o => o.ReceivedQty).ReadOnly().Format("{0:0.###}").Width(60);
            }
            if (ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Create)
            {
                columns.Command(commands => commands.Delete()).Width(80).Title("操作");
            }
        })
        .Scrollable(c => c.Enabled(false))
        .Footer(false)
        .ClientEvents(c => c.OnRowDataBound("onRowDataBound"))
    )
    @Html.Hidden("currentFlow", (String)ViewBag.flow)
    @Html.Hidden("PartyFrom", (string)ViewBag.PartyFrom)
    @Html.Hidden("PartyTo", (string)ViewBag.PartyTo)
    @Html.Hidden("orderSubType", (int)ViewBag.orderSubType)
    @Html.Hidden("onsumitType", 0)
    @Html.Hidden("IsProcurement", (bool)ViewBag.IsProcurement)
</fieldset>
<script type="text/javascript">
    $(function () {
        $("#checkAll").click(function () {
            $('input[name="checkedRecords"]').attr("checked", this.checked);
            $("#btnFilter").attr("style", this.checked ? "display:inline" : "display:none");
        });
    });
    function showButtons() {
        var $checkRecords = $("input[name='checkedRecords']");
        var showButton = false;
        for (var i = 0; i < $checkRecords.length; i++) {
            if ($checkRecords[i].checked) {
                showButton = true;
                break;
            }
        }
        $("#checkAll").attr("checked", $checkRecords.length == $("input[name='checkedRecords']:checked").length ? true : false);
        $("#btnFilter").attr("style", showButton ? "display:inline" : "display:none");
    }

    function Filter(isExport) {
        var $checkRecords = $("input[name='checkedRecords']");

        var checkedItems = ""; var checkedAllItems = "";
        for (var i = 0; i < $checkRecords.length; i++) {
            if (!$checkRecords[i].checked) {
                if (checkedItems == "") {
                    checkedItems = $checkRecords[i].value;
                } else {
                    checkedItems += "," + $checkRecords[i].value;
                }
            }
        }
        if (checkedItems == "") {
            alert('Should select at least one item');
            return;
        }
        //debugger
        var data = {
            "checkedItems": checkedItems,
            "flow": $('#Flow').val(),
            "WindowTime": $('#WindowTime_1').val().substring(0, 10) + " " + $('#WindowTime_1').val().substring(11, 19),
            "planVersion": $('#PlanVersion').val().substring(0, 10) + " " + $('#PlanVersion').val().substring(11, 19)
        };
        $.ajax({
            type: "get",
            dataType: "text",
            url: "/ProcurementOrder/_OrderDetailListFromPlan/",
            cache: false,
            data: data,
            success: function (data, textStatus) {
                $("#fdOrderDetail").html(data);
                $("#btnFilter").hide();
                
            }
        });
    }
</script>
