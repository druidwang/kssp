@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.ORD.IpMaster
<script type="text/javascript">
    function onReceive() {
        var grid = $("#IpDetail").data("tGrid");
        var rows = grid.$tbody.children("tr:not(.t-no-data)").filter("tr:visible");
        var idStr = "";
        var qtyStr = "";

        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            var id = row.find("#Id").val();
            var qty = row.find("#CurrentReceiveQty").val();
            if (qty != "" && !isNaN(qty) && parseFloat(qty) > 0) {
                if (idStr == "") {
                    idStr = id;
                    qtyStr = qty;
                } else {
                    idStr += "," + id;
                    qtyStr += "," + qty;
                }
            }
        }
        var data = {
            "idStr": idStr,
            "qtyStr": qtyStr
        }
        $.ajax({
            type: "Post",
            dataType: "Json",
            data: data,
            url: "/ProcurementIpMaster/ReceiveIpMaster/",
            cache: false,
            success: function (data, textStatus) {
                $message.success(data.SuccessMessage);
               
                if (data != "") {
                    $.ajax({
                        type: "Get",
                        dataType: "html",
                        data: { ipNo: data.SuccessData },
                        url: "/ProcurementIpMaster/_ReceiveIpDetailList/",
                        cache: false,
                        success: function (data, textStatus) {
                            var $tDiv = $("#divRecIpDetail");
                            $($tDiv).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                
                $message.error(errorMessages);
            }
        });
    }


//    function More(va) {
//        if (va.innerHTML == "More...") {
//            document.getElementById("divMore").style.display = 'inline'
//            document.getElementById("more").innerHTML = "Hide...";
//        }
//        else {
//            document.getElementById("divMore").style.display = 'none'
//            document.getElementById("more").innerHTML = "More...";
//        }
//    }
</script>

@{
    ViewBag.Title = "List";
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_ProcurementIpMaster_Receive" });
}
@using (Html.BeginForm())
{
        
    <div id="divMore" style="display: none">
     <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_BaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IpNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IpNo)
                @Html.HiddenFor(model => model.IpNo)
                @Html.HiddenFor(model => model.Type)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderType)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.OrderType,
        controlName = "IpOrderType",
        orderType = com.Sconit.CodeMaster.OrderType.Procurement,
        includeBlankOption = true,
        blankOptionDescription = CodeDetail.SpecialValueEnum.BlankValue,
        blankOptionValue = "",
        selectedValue = Model != null ? (int)Model.OrderType : 0,
        enable = false
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyFromName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFromName)
                @Html.HiddenFor(model => model.PartyFrom)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_PartyToName
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyToName)
                @Html.HiddenFor(model => model.PartyTo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFromAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipFrom",
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model.ShipFrom,

            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipTo",
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model.ShipTo,

            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFromContact)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromContact)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToContact)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipToContact)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFromTel)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromTel)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToTel)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromTel)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Dock)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Dock, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.IpStatus,
            controlName = "Status",
            selectedValue = Model != null ? (int)Model.Status : 0,
            enable = false
        });
                }
                @Html.HiddenFor(model => model.Status)
            </div>
            @* <div class="editor-label-2">
                @Html.LabelFor(model => model.StartDate)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.StartTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.WindowTime, (String)ViewBag.editorTemplate)
            </div>*@
        </div>
    </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_Audit</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseDate)
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_BarCodeOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsReceiveScanHu)
                </div>
                <div class="editor-field-2">
                    @{
  
                        @Html.CheckBoxFor(model => model.IsReceiveScanHu, new { disabled = true })
 
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsShipScanHu)
                </div>
                <div class="editor-field-2">
                    @{
   
                        @Html.CheckBoxFor(model => model.IsShipScanHu, new { disabled = true })

                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsReceiveFifo)
                </div>
                <div class="editor-field-2">
                    @{
   
                        @Html.CheckBoxFor(model => model.IsReceiveFifo, new { disabled = true })
   
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_PrintOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.AsnTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.AsnTemplate, controlName = "AsnTemplate", selectedValue = Model.AsnTemplate, enable = false });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintReceipt)
                </div>
                <div class="editor-field-2">
                    @{
  
                        @Html.CheckBoxFor(model => model.IsPrintReceipt, new { disabled = true })
 
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_OrderControl</legend>
            <div class="editor">
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsReceiveFulfillUC)
                </div>
                <div class="editor-field-3">
                    @{
  
                        @Html.CheckBoxFor(model => model.IsReceiveFulfillUC, new { disabled = true })
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsReceiveExceed)
                </div>
                <div class="editor-field-3">
                    @{
  
                        @Html.CheckBoxFor(model => model.IsReceiveExceed, new { disabled = true })
  
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAsnUniqueReceive)
                </div>
                <div class="editor-field-3">
                    @{
                        @Html.CheckBoxFor(model => model.IsAsnUniqueReceive, new { disabled = true })
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsCheckPartyFromAuthority)
                </div>
                <div class="editor-field-3">
                    @{
                        @Html.CheckBoxFor(model => model.IsCheckPartyFromAuthority, new { disabled = true })
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsCheckPartyToAuthority)
                </div>
                <div class="editor-field-3">
                    @{
                        @Html.CheckBoxFor(model => model.IsCheckPartyToAuthority, new { disabled = true })
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_AutomaticControl</legend>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoReceive)
            </div>
            <div class="editor-field-3">
                @{
                    @Html.CheckBoxFor(model => model.IsAutoReceive, new { disabled = true })
                }
            </div>
        </fieldset>
    </div>
    
    <div>
        <a type="text/html" onclick="More()" href="#" id="more">More...</a>
    </div>
        
    <div class="editor-footer">
             @Html.Button(Resources.SYS.Global.Button_Receive, "Url_ProcurementIpMaster_Receive", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnReceive"},
        {"needconfirm","true"},
        {"onclick","onReceive()"}
	})
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProcurementIpMaster/ReceiveList")'">
            @Resources.SYS.Global.Button_Back</button>
    </div>
}
<div id="divRecIpDetail">
    @{
        Html.RenderAction("_ReceiveIpDetailList", "ProcurementIpMaster", new { ipNo = Model.IpNo });
    }
</div>
