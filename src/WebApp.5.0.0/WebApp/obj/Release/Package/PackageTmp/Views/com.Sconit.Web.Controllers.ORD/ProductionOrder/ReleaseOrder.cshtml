@model com.Sconit.Entity.ORD.OrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_OrderMstr_Production_Release" });
}
@Html.Partial("_AjaxMessage")
@using (Html.BeginForm("_Edit", "ProductionOrder"))
{
    <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_BaseInfo</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.Flow)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.OrderNo)
            </div>
            <div class="editor-label-3">
                <label>
                    生产日期
                </label>
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.EffectiveDate)
            </div>
            <div class="editor-label-3">
                @*@Html.LabelFor(model => model.WMSNo)*@
            </div>
            <div class="editor-field-3">
                @*@Html.DisplayFor(model => model.WMSNo)*@
            </div>
            @* <div class="editor-label-3">
                @Html.LabelFor(model => model.Sequence)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.Sequence)
            </div>*@
            <div class="editor-label-3">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-3">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderPriority,
            controlName = "Priority",
            selectedValue = Model != null ? (int)Model.Priority : 0,
            enable = false
        });
                }
            </div>
            <div class="editor-label-3">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_Flow_Production
                </label>
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.Flow)
            </div>
            <div class="editor-label-3">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_FlowDescription_Production
                </label>
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.FlowDescription)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.SubType)
            </div>
            <div class="editor-field-3">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.OrderSubType,
        controlName = "SubType",
        selectedValue = Model != null ? (int)Model.SubType : 0,
        orderType = (int)com.Sconit.CodeMaster.OrderType.Production,
        enable = false
    });
                }
                @Html.HiddenFor(model => model.SubType)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.ExternalOrderNo)
            </div>
            @*  <div class="editor-label-3">
                @Html.LabelFor(model => model.TraceCode)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.TraceCode)
            </div>*@
            <div class="editor-label-3">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_PartyFromName_Production
                </label>
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.PartyFromName)
                @Html.HiddenFor(model => model.PartyFrom)
                @Html.HiddenFor(model => model.PartyFromName)
            </div>
            <div class="editor-label-3">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_LocationFromName_Production
                </label>
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.LocationFrom)
                [@Html.DisplayFor(model => model.LocationFromName)]
            </div>
            <div class="editor-label-3">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_LocationToName_Production
                </label>
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.LocationTo)
                [@Html.DisplayFor(model => model.LocationToName)]
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-3">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderStatus,
            controlName = "Status",
            selectedValue = Model != null ? (int)Model.Status : 0,
            enable = false
        });
                }
                @Html.HiddenFor(model => model.Status)
            </div>
            @*<div class="editor-label-3">
                @Html.LabelFor(model => model.IsPause)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.IsPause)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.PauseTime)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.PauseTime)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.PauseSequence)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.PauseSequence)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsProductLinePause)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.IsProductLinePause)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.CurrentOperation)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.CurrentOperation)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.ProductLineFacility)
            </div>
            <div class="editor-field-3">
                @Html.DisplayFor(model => model.ProductLineFacility)
            </div>*@
            <div class="editor-label-3">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.StartTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.WindowTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-3">
                <label>
                    @Html.LabelFor(model => model.Shift)
                </label>
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.Shift, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-3">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_Remarks
                </label>
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.Dock, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveScanHu)
            </div>
            <div class="editor-field-3">
                @Html.CheckBoxFor(model => model.IsReceiveScanHu, new { disabled = true })
            </div>

            <div class="editor-label-3">
                @Html.Label("零件号")
            </div>
            <div class="editor-field-3">
                @ViewBag.Item
            </div>
            <div class="editor-label-3">
                @Html.Label("零件名称")
            </div>
            <div class="editor-field-3">
                @ViewBag.ItemDescription
            </div>
            <div class="editor-label-3">
                @Html.Label("数量")
            </div>
            <div class="editor-field-3">
                @ViewBag.OrderedQty
            </div>
        </div>
    </fieldset>
    <div id="divMore" style="display: none">
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_Audit</legend>
            <div class="editor">
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CreateUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CreateUserName)
                    @Html.HiddenFor(model => model.CreateUserName)
                    @Html.HiddenFor(model => model.CreateUserId)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CreateDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CreateDate)
                    @Html.HiddenFor(model => model.CreateDate)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.LastModifyDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.LastModifyDate)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.ReleaseDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.ReleaseDate)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.StartUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.StartUserName)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.StartDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.StartDate)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CloseUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CloseUserName)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CloseDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CloseDate)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CancelUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CancelUserName)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CancelDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CancelDate)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CompleteUserName)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CompleteUserName)
                </div>
                <div class="editor-label-4">
                    @Html.LabelFor(model => model.CompleteDate)
                </div>
                <div class="editor-field-4">
                    @Html.DisplayFor(model => model.CompleteDate)
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_PrintOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintOrder)
                </div>
                <div class="editor-field-2">
                    @Html.CheckBoxFor(model => model.IsPrintOrder, new { disabled = true })
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.OrderTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate, controlName = "OrderTemplate", selectedValue = Model.OrderTemplate, enable = false });
                    }
                </div>
            </div>
        </fieldset>
    </div>
    <div>
        <a type="text/html" onclick="More()" href="#" id="more">More...</a>
    </div>
    <fieldset id="traceCodeStats">
        <legend title="追溯码状态">追溯码状态</legend>
        @(Html.Telerik().Grid<TraceCodeStatus>()
            .Name("TraceCodeStatusGrid")
            .DataKeys(keys =>
            {
                keys.Add(p => p.TraceCode);
            })
            .Columns(columns =>
            {
                columns.Bound(o => o.TraceCode).Title("追溯码");
                columns.Bound(o => o.Op1).Title("追溯码打印");
                columns.Bound(o => o.Op2).Title("涂胶机1");
                columns.Bound(o => o.Op3).Title("涂胶机2");
                columns.Bound(o => o.Op4).Title("库卡机器人");
                columns.Bound(o => o.Op5).Title("完工");
                columns.Bound(o => o.Op6).Title("收货");
            
         
               // columns.Bound(o => o.EffectiveDate);
            })
            .Scrollable(c => c.Enabled(false))
            .EnableCustomBinding(true)
                            .DataBinding(dataBinding => dataBinding.Ajax().Select("GetTraceCodeStatus", "ProductionOrder"))
                            .ClientEvents(events => events.OnDataBinding("TraceCodeStatusGrid_OnDataBinding"))

            .Sortable(s=>s.Enabled(false))
            .Resizable(resizing => resizing.Columns(true))
        )
    </fieldset>
    <div style="text-align: center;">

        @if (Model.Status == com.Sconit.CodeMaster.OrderStatus.Submit)
        {
            @Html.Button("上线", "Url_OrderMstr_Production_Start", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnStart"},
                {"needconfirm","true"},
                {"onclick","StartOrder(this)"}
	        })
        }

        @if (Model.Status == com.Sconit.CodeMaster.OrderStatus.InProcess)
        {
            @Html.Button("打印追溯码", "Url_OrderMstr_Production_Start", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnPrinctTraceCode"},
                {"onclick","PrintTraceCode(this)"}
	        })
        }
@*@Html.Button(Resources.SYS.Global.Button_KBOrderBomDet, "Url_OrderMstr_Production_KBOrderBomDetailList", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnKBOrderBomDet"},
        {"onclick","OpenKBOrderBomDetWindow();"}
	})*@
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProductionOrder/Release")'">
            @Resources.SYS.Global.Button_Back</button>
    </div>
}

<script type="text/javascript">
    function StartOrder(e) {
        var data = {
            "orderNo": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "/ProductionOrder/StartOrder/",
            data: data,
            success: function (data, textStatus) {
                DisplayJsonMessages(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                $message.error(errorMessages);
            }
        });
    }

    function PrintTraceCode(e) {
        var data = {
            "orderNo": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "/ProductionOrder/PrintTraceCode/",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    PrintOrder(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                $message.error(errorMessages);
            }
        });
    }

    function TraceCodeStatusGrid_OnDataBinding(e) {
        e.data = {
            'orderNo': $('#OrderNo').val()
        }
    }


    $(document).everyTime(5000, 'MessageShow',
         function (i) {
             var grid = $("#TraceCodeStatusGrid").data("tGrid");
             grid.ajaxRequest({ orderNo: $('#OrderNo').val() });
         }, 0);
   
</script>
