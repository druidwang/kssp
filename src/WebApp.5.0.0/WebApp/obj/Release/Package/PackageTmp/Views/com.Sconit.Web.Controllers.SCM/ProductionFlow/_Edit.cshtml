@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.SCM.FlowMaster
@Html.Partial("_AjaxMessage")
<script type="text/javascript">
    function PartyFrom_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox == undefined) {
            return;
        }
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            combobox.reload();
        }
        $('#LocationFrom').data('tComboBox').value('');
        $('#LocationFrom').data('tComboBox').text('');
        $("#LocationFrom").data("tComboBox").reload();
    }

    function PartyTo_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox == undefined) {
            return;
        }
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            combobox.reload();
        }
        $('#LocationTo').data('tComboBox').value('');
        $('#LocationTo').data('tComboBox').text('');
        $("#LocationTo").data("tComboBox").reload();

    }

    function LocationFrom_DataBinding(e) {
        e.data = {
            region: $("#PartyFrom").val()
        };
    }

    function LocationTo_DataBinding(e) {
        e.data = {
            region: $("#PartyTo").val()
        };
    }
</script>
<form action="/ProductionFlow/_Edit" method="post">
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Code)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Code)
                @Html.Hidden("Code", Model != null ? Model.Code : string.Empty)
                @Html.Hidden("FlowStrategy", Model.FlowStrategy)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsActive)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.IsActive)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionDescription)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
            <div class="editor-label-2">
                @*@Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_DAUAT)*@
            </div>
            <div class="editor-field-2">
                @*@Html.EditorFor(model => model.DAUAT)*@
            </div>

            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionRegion)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_RegionComboBox", "Common",
                        new { controlName = "PartyFrom", selectedValue = Model.PartyFrom, isChange = true });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionRegionTo)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_RegionComboBox", "Common",
                        new { controlName = "PartyTo", selectedValue = Model.PartyTo, isChange = true });
                }
            </div>

            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionLocationFrom)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_LocationComboBox", "Common",
                        new
                        {
                            controlName = "LocationFrom",
                            selectedValue = Model.LocationFrom,
                            checkRegion = true
                        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionLocationTo)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_LocationComboBox", "Common",
                        new
                        {
                            controlName = "LocationTo",
                            selectedValue = Model.LocationTo,
                            checkRegion = true
                        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ReferenceFlow)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_FlowComboBox", "Common",
                        new
                        {
                            controlName = "ReferenceFlow",
                            selectedValue = Model.ReferenceFlow,
                            type = (int)com.Sconit.CodeMaster.OrderType.Production,
                            includeBlankOption = true
                        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.UcDeviation)
            </div>
            <div class="editor-field-2">
                @Html.Telerik().NumericTextBoxFor(model => model.UcDeviation).DecimalDigits(2).MinValue(-1)%
            </div>
            @*<div class="editor-label-1">
                <label>@Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceFormat</label>
            </div>
            <div class="editor-field-1">
                @Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceToolTips
            </div>

            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExtraLocationFrom)
            </div>
            <div class="editor-field-2">
                @Html.TextBoxFor(model => model.ExtraLocationFrom)
            </div>

            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExtraLocationTo)
            </div>
            <div class="editor-field-2">
                @Html.TextBoxFor(model => model.ExtraLocationTo)
            </div>*@

            @*<div class="editor-label-2">
                @Html.LabelFor(model => model.MaxOrderCount)
            </div>
            <div class="editor-field-2">
                @Html.Telerik().NumericTextBoxFor(model => model.MaxOrderCount).DecimalDigits(0).MinValue(0)
                @Html.ValidationMessageFor(model => model.MaxOrderCount)
            </div>*@
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderDeviation)
            </div>
            <div class="editor-field-2">
                @Html.Telerik().NumericTextBoxFor(model => model.OrderDeviation).DecimalDigits(2).MinValue(-1)%
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ResourceGroup)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_CodeMasterDropDownList", "Common", new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.ResourceGroup,
                        controlName = "ResourceGroup",
                        selectedValue = (int)Model.ResourceGroup
                    });
                }
            </div>
            @*<div class="editor-label-2">
            @Html.LabelFor(model => model.Routing)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_RoutingComboBox", "Common", new
                {
                    controlName = "Routing",
                    controlId = "FlowMasterRouting",
                    selectedValue = Model.Routing
                });
            }
            @Html.ValidationMessageFor(model => model.Routing)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ReturnRouting)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_RoutingDropDownList", "Common", new
                {
                    controlName = "ReturnRouting",
                    controlId = "FlowMasterReturnRouting",
                    selectedValue = Model.ReturnRouting,
                    includeBlankOption = true
                });
            }
            @Html.ValidationMessageFor(model => model.ReturnRouting)
        </div>*@
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBarCode</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateHuOption)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_CodeMasterDropDownList", "Common",
                        new
                        {
                            code = com.Sconit.CodeMaster.CodeMaster.CreateHuOption,
                            controlName = "CreateHuOption",
                            selectedValue = Model != null ? (int)Model.CreateHuOption : 0
                        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.HuTemplate)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_CodeMasterDropDownList", "Common",
                        new
                        {
                            code = com.Sconit.CodeMaster.CodeMaster.HuTemplate,
                            controlName = "HuTemplate",
                            selectedValue = Model != null ? Model.HuTemplate : string.Empty
                        });
                }
            </div>

            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsReceiveScanHu)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.IsReceiveScanHu)
            </div>

            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendPrint</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintOrder)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.IsPrintOrder)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderTemplate)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_CodeMasterDropDownList", "Common",
                        new
                        {
                            code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate,
                            controlName = "OrderTemplate",
                            selectedValue = Model != null ? Model.OrderTemplate : string.Empty
                        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintRceipt)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.IsPrintRceipt)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiptTemplate)
            </div>
            <div class="editor-field-2">
                @{
                    Html.RenderAction("_CodeMasterDropDownList", "Common",
                        new
                        {
                            code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate,
                            controlName = "ReceiptTemplate",
                            selectedValue = Model != null ? Model.ReceiptTemplate : string.Empty
                        });
                }
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_SubconctractingLegendOrderControl</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsOrderFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsOrderFulfillUC)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsListDet)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsListDet)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsManualCreateDetail)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsManualCreateDetail)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveExceed)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsReceiveExceed)
            </div>
            @*<div class="editor-label-3">
                <label>单独废品报工</label>
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsListPrice)
            </div>*@
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyFromAuthority)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsCheckPartyFromAuthority)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyToAuthority)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsCheckPartyToAuthority)
            </div>
            @*<div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_Feed)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsCreatePickList)
            </div>*@
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendAutomatic</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoCreate)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsAutoCreate)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoRelease)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsAutoRelease)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsAutoStart)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsAutoStart)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoReceive)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsAutoReceive)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsInspect)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsInspect)
            </div>

            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsMRP)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsMRP)
            </div>
        </div>
    </fieldset>
    <div class="editor-footer">
        @Html.Button(Resources.SYS.Global.Button_Save, "Url_ProductionFlow_Edit", new Dictionary<string, string>()
	{
	    {"type", "submit"},
	    {"id", "btnEdit"},
        {"needconfirm","true"}
	})

        @Html.Button(Resources.SYS.Global.Button_Delete, "Url_ProductionFlow_Delete", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnDel"},
        {"needconfirm","true"},
        {"onclick","location.href='"+Url.Content("~/ProductionFlow/FlowDel/" + Model.Code) +"'"}
	})
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProductionFlow/List")'">
            @Resources.SYS.Global.Button_Back</button>
    </div>
</form>
<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        $("form[action$='_Edit']").submit(function () {
            $.post($(this).attr("action"), $(this).serialize(), function (response) {
                var tabStrip = $("#TabStrip");
                var tabStripContent0 = tabStrip.data("tTabStrip").getContentElement(0);
                $(tabStripContent0).html(response);
            });
            return false;
        });
    });
</script>
