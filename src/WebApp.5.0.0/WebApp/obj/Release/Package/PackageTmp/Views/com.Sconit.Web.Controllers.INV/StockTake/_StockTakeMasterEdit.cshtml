@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.INV.StockTakeMaster
@using (Html.BeginForm("btnComplete", "StockTake"))
{
    <fieldset id="edit">
        <legend>@Resources.INV.StockTake.StockTakeMaster_Edit_Title</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.StNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.StNo)
                @Html.HiddenFor(model => model.StNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Type)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.TypeDescription)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.StockTakeStatusDescription)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Region)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Region)
                @Html.HiddenFor(model => model.Region)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.EffectiveDate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BaseInventoryDate)
            </div>
            <div class="editor-field-2">
                @if (Model.Status == com.Sconit.CodeMaster.StockTakeStatus.InProcess)
                {
                    @Html.Telerik().DateTimePickerFor(model => model.BaseInventoryDate)
                }
                else
                {
                    @Html.DisplayFor(model => model.BaseInventoryDate)
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsScanHu)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsScanHu)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Remark)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Remark)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CostCenter)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CostCenter)
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_Audit</legend>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CreateUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CreateUserName)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CreateDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CreateDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.LastModifyUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.LastModifyUserName)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.LastModifyDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.LastModifyDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.ReleaseUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.ReleaseUserName)
        </div>
        <div class="editor-label-4">
           @Html.LabelFor(model => model.ReleaseDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.ReleaseDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.StartUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.StartUserName)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.StartDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.StartDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CompleteUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CompleteUserName)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CompleteDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CompleteDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CloseUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CloseUserName)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CloseDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CloseDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CancelUserName)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CancelUserName)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CancelDate)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CancelDate)
        </div>
        <div class="editor-label-4">
            @Html.LabelFor(model => model.CancelReason)
        </div>
        <div class="editor-field-4">
            @Html.DisplayFor(model => model.CancelReason)
        </div>
    </fieldset>
        <div class="editor-footer">
            @{
       if (Model.Status == com.Sconit.CodeMaster.StockTakeStatus.Create)
       { 
                @Html.Button(Resources.SYS.Global.Button_Submit, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnSubmit"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnSubmit/"+Model.StNo)+"'"}
	                })
                @Html.Button(Resources.SYS.Global.Button_Delete, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnDelete"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnDelete/"+Model.StNo)+"'"}
	                })
                @*<button type="button" id="btnSubmit" onclick="location.href='@Url.Content("~/StockTake/btnSubmit/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Submit</button> 
                <button type="button" id="btnDelete" onclick="location.href='@Url.Content("~/StockTake/btnDelete/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Delete</button>*@   
       }
       else if (Model.Status == com.Sconit.CodeMaster.StockTakeStatus.Submit)
       {
                @Html.Button(Resources.SYS.Global.Button_Start, "Url_Inventory_StockTake_Start", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnStart"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnStart/"+Model.StNo)+"'"}
	                })
                @Html.Button(Resources.SYS.Global.Button_Cancel, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnCancel"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnCancel/"+Model.StNo)+"'"}
	                })
                @*<button type="button" id="btnStart" onclick="location.href='@Url.Content("~/StockTake/btnStart/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Start</button>
                <button type="button" id="btnCancel" onclick="location.href='@Url.Content("~/StockTake/btnCancel/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Cancel</button>*@
            
       }
       else if (Model.Status == com.Sconit.CodeMaster.StockTakeStatus.InProcess)
       {
                @Html.Button(Resources.SYS.Global.Button_Complete, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "submit"},
	                    {"id", "btnComplete"},
                        {"needconfirm","true"}
	                })
                @Html.Button(Resources.SYS.Global.Button_Cancel, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnCancel"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnCancel/"+Model.StNo)+"'"}
	                })
                @*<button type="submit" id="btnComplete">
                    @Resources.SYS.Global.Button_Complete</button>
                <button type="button" id="btnCancel" onclick="location.href='@Url.Content("~/StockTake/btnCancel/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Cancel</button>*@
       }
       else if (Model.Status == com.Sconit.CodeMaster.StockTakeStatus.Complete)
       {
                @Html.Button(Resources.SYS.Global.Button_Close, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnClose"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnClose/"+Model.StNo)+"'"}
	                })
                @*@Html.Button(Resources.SYS.Global.Button_Cancel, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnCancel"},
                        {"needconfirm","true"},
                        {"onclick","location.href='"+Url.Content("~/StockTake/btnCancel/"+Model.StNo)+"'"}
	                })*@
                @*<button type="button" id="btnClose" onclick="location.href='@Url.Content("~/StockTake/btnClose/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Close</button>
                <button type="button" id="btnCancel" onclick="location.href='@Url.Content("~/StockTake/btnCancel/" + @Model.StNo)'">
                    @Resources.SYS.Global.Button_Cancel</button>*@
       }
            }
            @Html.Button(Resources.SYS.Global.Button_Print, "Url_Inventory_StockTake_New", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnPrint"},
                    {"needconfirm","true"},
                    {"onclick","doPrint()"}
                   // {"onclick","location.href='"+Url.Content("~/StockTake/Print/"+Model.StNo)+"'"}
	            })
            <button type="button" id="btnExport" onclick="Export()">
                @Resources.SYS.Global.Button_Export</button>
            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/StockTake/StockTakeMasterList")'">
                @Resources.SYS.Global.Button_Back</button>
        </div>
}
<form name="hiddenForm" id="hiddenForm" action="/StockTake/SaveToClient" target="_blank" method="post">
    <input id="stNo" name="stNo" type="hidden" />
</form>
<script type="text/javascript">
    function Export(e) {
        
        $("#stNo").val($("#StNo").val());
        $("#hiddenForm").submit();
    }

    function doPrint(e) {
        var data = {
            "StNo": $("#StNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "/StockTake/Print/",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    PrintOrder(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                $message.error(errorMessages);
            }
        });
    }
</script>
<div id="IsReadonly">
    @{ 
        Html.RenderAction("_StockTakeLocation", "StockTake", new { StNo = Model.StNo, Status = Model.Status });

        if (Model.Type == com.Sconit.CodeMaster.StockTakeType.Part)
        {
            Html.RenderAction("_StockTakeItem", "StockTake", new { StNo = Model.StNo, Status = Model.Status });
        }
    }
</div>

