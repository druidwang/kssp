@model com.Sconit.Entity.ORD.MiscOrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_CostCenterMiscOrder_New" });
}
<script type="text/javascript">
    function onSuccess(e) {
        TelerikonUpload_OnSuccess(e);
        var data = {
            "MiscOrderNo": $("#MiscOrderNo").val(),
            "MoveType": $("#MoveType").val(),
            "Status": $("#Status").val()
        }
        var url = "";
        if ($("#IsScanHu").val() == "True") {
            url = "/CostCenterMiscOrder/_MiscOrderDetailIsScanHu/";
        }
        else {
            url = "/CostCenterMiscOrder/_MiscOrderDetail/";
        }
        $.ajax({
            type: "get",
            dataType: "html",
            url: url,
            cache: false,
            data: data,
            success: function (data, textStatus) {
                var $tGrid = $("#divOutMiscOrderDetailList");
                $($tGrid).html(data);
            }
        });
    }
    function onUpload(e) {
        e.data = { MiscOrderNo: "NotRelyOnMiscOrdNo"
        };

    }
    function onCreate() {
        var grid = $("#MiscOrderDetailGrid").data("tGrid");
        if (grid == null && !$('#IsScanHu').is(":checked")) {
            $message.error('明细不能为空。');
            return;
        }

        if ($("#EffectiveDate").val() == "") {
            $message.error('生效日期为必填项。');
            return;
        }

        if ($("#Location").val() == "") {
            $message.error('库位为必填项。');
            return;
        }

        if ($("#MoveType").val() == "") {
            $message.error('移动类型为必填项。');
            return;
        }

        //if ($("#GeneralLedger").val() == "") {
        //    $message.error('总账科目为必填项。');
        //    return;
        //}

        if ($("#CostCenter").val() == "") {
            $message.error('成本中心为必填项。');
            return;
        }

        if ($("#Note").val() == "") {
            $message.error('原因为必填项。');
            return;
        }
        var miscmstr = {
            "MoveType": $("#MoveType").val(),
            "Location": $("#Location").val(),
            "EffectiveDate": $("#EffectiveDate").val(),
            "CostCenter": $("#CostCenter").val(),
            "Note": $("#Note").val(),
            "ReferenceDocumentsType": $("#ReferenceDocumentsType").val(),
            "ReferenceNo": $("#ReferenceNo").val(),
            "QualityType": $("#QualityType").val(),
            "IsScanHu": $('#IsScanHu').is(":checked"),
            "IsCs": $('#IsCs').is(":checked")
        }

        var sequences = "";
        var items = "";
        var locations = "";
        var qtys = "";
        var rows = grid.$tbody.children("tr:not(.t-no-data)").filter("tr:visible");
        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            if ($.trim(row[0].childNodes[1].innerText) != "" && parseFloat($.trim(row[0].childNodes[6].innerText)) != 0) {
                if (items != "") {
                    sequences += ",";
                    items += ",";
                    locations += ",";
                    qtys += ",";
                }
                sequences += $.trim(row[0].childNodes[0].innerText);
                items += $.trim(row[0].childNodes[1].innerText);
                locations += $.trim(row[0].childNodes[5].innerText);
                qtys += $.trim(row[0].childNodes[6].innerText);
            }
        }

        var made = {
            "sequences": sequences,
            "items": items,
            "locations": locations,
            "qtys": qtys
        }

        $.ajax({
            type: "post",
            dataType: "text",
            url: "/CostCenterMiscOrder/CreateMiscOrder/",
            data: $.extend(miscmstr, made),
            cache: false,
            success: function (data) {
                $("#content").html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function MoveType_Change(e) {
    }

    function loadReferenceNo() {
        if ($("#ReferenceNo").val() == "") {
            $message.success('引用明细参考订单号不能为空！');
            return;
        }
        var data = { "referenceNo": $("#ReferenceNo").val() };
        $.ajax({
            type: "get",
            dataType: "html",
            url: "/CostCenterMiscOrder/New/",
            data: data,
            cache: false,
            success: function (data, textStatus) {
                $("#content").html(data);
                //$("#fdOrderDetail").show();
                $("tr.t-no-data").find("td").text("Loading...");
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $message.error(errorThrown);
            }
        });
    }

    function doIsScanHuClick(bl) {
        if ($('#IsScanHu').is(":checked")) {
            $('#fieldsetEditNew').hide();
        }
        else {
            $('#fieldsetEditNew').show();
        }
    }

    function MoveType_Change(e) {
        if (e.value === '202') {
            $('#IsCs').attr("disabled", true);
            $('#IsCs').attr("checked", false)
            //$('#IsCsLable').hide(); 
        }
        else {
            $('#IsCs').attr("disabled", false);
            //$('#IsCsLable').show();
        }
    }

</script>
<fieldset>
    <legend>@Resources.ORD.IpMaster.IpMaster_BaseInfo</legend>
    <div class="editor">
        <div class="editor-label-2">
            @Html.LabelFor(model => model.MoveType)
        </div>
        <div class="search-field">
            @{
                Html.RenderAction("_MoveTypeDropDownList", "Common", new
                    {
                        //IOType = (int)com.Sconit.CodeMaster.MiscOrderType.GI,
                        SubType = (int)com.Sconit.CodeMaster.MiscOrderSubType.COST,
                        isChange = true,
                        controlName = "MoveType",
                        blankOptionValue = "",
                        selectedValue = Model != null && Model.MoveType != null ? Model.MoveType : string.Empty
                    });
            }
            @Html.ValidationMessageFor(model => model.MoveType)
            @*@Html.HiddenFor(model => model.IsScanHu)*@
            @Html.HiddenFor(model => model.ReferenceDocumentsType)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.EffectiveDate)
        </div>
        <div class="editor-field-2">
            @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("EffectiveDate").Value(DateTime.Now)
            .Min(DateTime.Now.AddDays(-30)).Max(DateTime.Now)
            .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            @Html.ValidationMessageFor(model => model.EffectiveDate)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Location)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_LocationComboBox", "Common", new
                {
                    controlName = "Location",
                    checkRegion = false,
                    selectedValue = Model != null ? Model.Location : null
                });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.QualityType)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common", new
                   {
                       code = com.Sconit.CodeMaster.CodeMaster.QualityType,
                       controlName = "QualityType",
                       selectedValue = Model != null ? ((int)Model.QualityType).ToString() : null,
                       //includeBlankOption = true
                   });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.CostCenter)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CostCenterComboBox", "Common", new
                {
                    controlName = "CostCenter",
                    selectedValue = Model != null ? Model.CostCenter : null
                });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.GeneralLedger)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_GeneralLedgerComboBox", "Common", new
                {
                    controlName = "GeneralLedger",
                    selectedValue = Model != null ? Model.GeneralLedger : null,
                    enable = false
                });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ReferenceNo)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.ReferenceNo)
            <button type="button" id="refSearch" onclick="loadReferenceNo();">
                @Resources.SYS.Global.Button_Reference</button>
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Note)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.Note)
        </div>
        <div class="editor-label-2">
        </div>
        <div class="editor-field-2">
            @Html.CheckBox("IsCs", false)<span id="IsCsLable">@Resources.ORD.MiscOrderMstr.MiscOrderMstr_IsCs</span><span style="margin: 4px"></span>
            @Html.CheckBox("IsScanHu", false, new { onclick = "doIsScanHuClick(true)" })@Resources.INV.StockTake.StockTakeMaster_IsScanHu
        </div>
            @{
                if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create)
                {
                <div class="search-label">
                    <label>
                        <a href='/Resource/Templates/UploadTemplate/ImportMiscOrder.xls'>@Resources.EXT.PageLan.TemplateDownload</a>
                    </label>
                </div>
                <div class="search-field">
                    @(Html.Telerik().Upload()
                    .Name("attachments")
                    .Multiple(false)
                    .Async(async => async
                    .Save("ImportMiscOrderDetail", "CostCenterMiscOrder")
                    .AutoUpload(true))
                    .ClientEvents(e => e.OnSuccess("onSuccess").OnUpload("onUpload")))
                </div>
                }
            }
        <div class="editor-footer">
            @Html.Button(Resources.SYS.Global.Button_New, "Url_CostCenterMiscOrder_New", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onCreate()"}
	        })
        </div>
    </div>
</fieldset>
<fieldset id="fieldsetEditNew">
    @{
        Html.RenderAction("_MiscOrderDetail", "CostCenterMiscOrder", new { referenceNo = ViewBag.ReferenceNo, referenceDocumentsType = ViewBag.ReferenceDocumentsType });
    }
</fieldset>
<div id="fdOrderDetail">
</div>

