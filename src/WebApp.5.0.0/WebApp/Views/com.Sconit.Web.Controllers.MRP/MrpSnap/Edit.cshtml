@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.MRP.TRANS.MrpSnapMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_MrpSnap_Index" });
}
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.MRP.MrpSnapMaster.MrpSnapMaster_Edit_Title</legend>
        <div class="editor">
            @Html.HiddenFor(model => model.SnapTimeShow)
            @Html.HiddenFor(model => model.CreateUserName)
            @Html.HiddenFor(model => model.CreateDate)
            @Html.HiddenFor(model => model.CreateUserId)
            <div class="editor-label-2">
                @Html.LabelFor(model => model.SnapTime)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.SnapTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.MessageType,
        controlName = "Status",
        includeBlankOption = true,
        enable = false,
        selectedValue = (int)Model.Status
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateUserName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateUserName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateDate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsRelease)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsRelease)
                @Html.HiddenFor(model => model.IsRelease)
            </div>
        </div>
        <div class="editor-footer">
            @{
    if (Model.Status != com.Sconit.CodeMaster.MessageType.Error)
    {
        if (Model.IsRelease)
        {
                @Html.Button(Resources.SYS.Global.Button_Cancel, "Url_MrpSnap_Index", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnSubmit"},
                {"needconfirm","true"},
                {"onclick","OnSava()"}
            }) 
        }
        else
        {
                @Html.Button(Resources.SYS.Global.Button_Submit, "Url_MrpSnap_Index", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnSubmit"},
                {"needconfirm","true"},
                {"onclick","OnSava()"}
            }) 
        }
    }
                <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/MrpSnap/List")'">
                    @Resources.SYS.Global.Button_Back</button>
            }
        </div>
    </fieldset>
    
 
    Html.RenderAction("_MrpSnapError", "MrpSnap", new { snapTimeShow = Model.SnapTimeShow });

}
<script type="text/javascript">
    function OnSava() {
        var data = {
            "snapTimeShow": $("#SnapTimeShow").val(),
            "isRelease": $("#IsRelease").val().toUpperCase() == "FALSE"
        };

        $.ajax({
            type: "post",
            dataType: "html",
            url: "/MrpSnap/Save/",
            data: data,
            cache: false,
            success: function (data, textStatus) {
                var $tGrid = $("#content");
                $($tGrid).html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

</script>
