@using com.Sconit.Entity.MD;
@using com.Sconit.Entity.INV;
@model IEnumerable<com.Sconit.Entity.INP.InspectDetail>   
<script type="text/javascript">
    function onItemComboBoxChange(e) {
        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
                $("#fdOrderDetail").hide();
            }
            else {
                var data = {
                    "itemCode": e.value
                }
                $.ajax({
                    type: "post",
                    dataType: "json",
                    url: "/InspectionOrder/_WebInspectDetail/",
                    data: data,
                    success: function (data, textStatus) {
                        var $tGrid = $("#InspectDetail").data("tGrid");
                        var oldData = $tGrid.dataItem($(e.target).parent().parent().parent());
                        $(e.target).parent().parent().next().html(data.ReferenceItemCode);
                        $(e.target).parent().parent().next().next().html(data.ItemDescription);
                        $(e.target).parent().parent().next().next().next().html(data.Uom);
                        $(e.target).parent().parent().next().next().next().next().html(data.UnitCount);

                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                });
            }

        }
    }

</script>
<fieldset>
    <legend>@Resources.INP.InspectDetail.InspectDetail_Title_View</legend>
    @(Html.Telerik().Grid(Model)
        .Name("InspectDetail")
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .Editable(editing => editing.Mode(GridEditMode.InCell))
        .ToolBar(commands =>
        {
            commands.Insert();
        })
        .DataBinding(dataBinding =>
            dataBinding.Ajax()
            .Select("_SelectBatchEditing", "InspectionOrder", new { inspectNo = (String)ViewBag.inspectNo })
        )
        .Columns(columns =>
        {
            //columns.ForeignKey(o => o.Item, (IEnumerable<Item>)ViewData["items"], "Code", "Code").EditorTemplateName("ItemGridForeignKey");
            columns.Bound(o => o.Item).EditorTemplateName("ItemForeignKey").Width(120);
            columns.Bound(o => o.ItemDescription).ReadOnly();
            columns.Bound(o => o.ReferenceItemCode).ReadOnly();
            columns.Bound(o => o.Uom).ReadOnly();
            columns.Bound(o => o.UnitCount).Format("{0:0.###}").ReadOnly();
            columns.Bound(o => o.InspectQty).Format("{0:0.###}").Width(57);
            columns.Bound(o => o.FailCode).EditorTemplateName("FailCodeGridComboBox").Width(120);
            columns.Bound(o => o.Note);
            columns.Command(commands => commands.Delete());
            
        })
        .Scrollable(c => c.Enabled(false))
        .Footer(false)
    )
</fieldset>
