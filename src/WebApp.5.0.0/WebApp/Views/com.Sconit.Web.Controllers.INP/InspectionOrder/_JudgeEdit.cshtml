@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.INP.InspectMaster
<script type="text/javascript">
    function onJudge(e) {
        var hasError = false;
        var rows = $(".t-last");
        for (var i = 0; i < rows.length; i++) {
            if (isNaN($(rows[i]).prev().prev().text()) && $(rows[i]).prev().prev().text() != "") {
                $message.error("第" + (i + 1) + "行本次判定数必须为数字");
                hasError = true;
            }
        }
        if (hasError) {
            return;
        }

        var inspectOrder = {
            "InspectNo": $("#InspectNo").val(),
            "inspectType": $("#Type").val()
        }
        var grid = $("#InspectDetail").data("tGrid");
        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var inspectDetails = grid.changeLog.serialize(inserted, updated, deleted);
        grid._convert(inspectDetails);
        $.ajax({
            type: "post",
            dataType: "json",
            url: "/InspectionOrder/Judge/",
            data: $.extend(inspectDetails, inspectOrder),
            success: function (data) {
                DisplayTextMessages(data);
                if (data != "") {
                    var orderData = {
                        "id": $("#InspectNo").val()
                    };
                    $.ajax({
                        type: "post",
                        dataType: "html",
                        url: "/InspectionOrder/JudgeEdit/",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            var $tGrid = $("#content");
                            $($tGrid).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                $message.error(errorMessages);
            }
        });
    }

    function judgeQualify() {
        batchJudge("/InspectionOrder/JudgeQualify/");
    }

    function judgeReject() {
        var $grid = $("#InspectionOrderDetailGrid").data("tGrid");
        var rows = $grid.$tbody.children("tr");

        for (var i = 0; i < rows.length; i++) {
            var row = $(rows[i]);
            if ($(row).children().eq(0).children().attr("checked") == "checked" && $(row).children("td:.t-last").prev().text() == "") {
                $message.error("第" + (i + 1) + "行失效模式为必填");
                return;
            }
        }
        batchJudge("/InspectionOrder/JudgeReject/");
    }

    function judgeHu() {
        
        var $grid = $("#InspectionOrderDetailGrid").data("tGrid");
        var rows = $grid.$tbody.children("tr");
        var idStr = "";
        var failCodeStr = "";
        var notesStr = "";
        var data = "";
        var handleResult = $("#HandleResult").val();
        var urlName = "/InspectionOrder/JudgeHu/";
        for (var i = 0; i < rows.length; i++) {
            var row = $(rows[i]);
            
            if ($(row).children().eq(0).children().attr("checked") == "checked" && $(row).children("td:.t-last").prev().text() == "") {
                if (handleResult == "") {
                    $message.error("第" + (i + 1) + "行失效模式为必填");
                    return;
                }
            }

            if ($(row).children().eq(0).children().attr("checked") == "checked") {
                if (idStr == "") {
                    idStr = $(row).children().eq(0).children().val();
                    if ($(row).children("td:.t-last").prev().text() == "") {
                        failCodeStr = handleResult;
                    }
                    else {
                        failCodeStr = $(row).children("td:.t-last").prev().text();
                    }
                    notesStr = $(row).children("td:.t-last").text();
                }
                else {
                    idStr += "," + $(row).children().eq(0).children().val();
                    if ($(row).children("td:.t-last").prev().text() == "") {
                        failCodeStr += "," + handleResult;
                    }
                    else {
                        failCodeStr += "," + $(row).children("td:.t-last").prev().text();
                    }
                    notesStr += "," + $(row).children("td:.t-last").text();
                }
            }
        }
        data = {
            "idStr": idStr,
            "failCodeStr": failCodeStr,
            "notes": notesStr,
            "inspectNo": $("#InspectNo").val()
        };

        $.ajax({
            type: "post",
            dataType: "html",
            url: urlName,
            data: data,
            cache: false,
            success: function (data) {
                DisplayTextMessages(data);
                if (data != "") {
                    var orderData = {
                        "id": $("#InspectNo").val()
                    };
                    $.ajax({
                        type: "post",
                        dataType: "html",
                        url: "/InspectionOrder/JudgeEdit/",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            var $tGrid = $("#content");
                            $($tGrid).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                $message.error(errorMessages);
            }
        });
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.INP.InspectMaster.InspectMaster_Title_View</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.InspectNo)
                @Html.Hidden("InspectNo", Model.InspectNo.ToString())
                @Html.Hidden("Type", ((int)Model.Type).ToString())
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.InspectNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.InspectStatusDescription)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrint)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsPrint)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsATP)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsATP)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IpNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IpNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiptNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ReceiptNo)
            </div>
            @*  <div class="editor-label-2">
                @Html.LabelFor(model => model.WMSNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.WMSNo)
            </div>*@
            
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyFrom)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFrom)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyFromName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFromName)
            </div>

            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateUserName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateUserName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateDate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.LastModifyDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.LastModifyDate)
            </div>
            <div class="editor-label-2">
                <label>
                @Resources.ACC.User.User_User
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.LastModifyUserName)
            </div>
        </div>
        <div class="editor-footer">
            @{
    if (Model.Status != com.Sconit.CodeMaster.InspectStatus.Close)
    {
        if (Model.Type == com.Sconit.CodeMaster.InspectType.Quantity)
        {
                @Html.Button(Resources.SYS.Global.Button_Judge, "Url_InspectionOrder_Judge", new Dictionary<string, string>()
	                {
	                    {"type", "button"},
	                    {"id", "btnJudge"},
                        {"needconfirm","true"},
                        {"onclick","onJudge()"}
	                })
        }
        else if (Model.Type == com.Sconit.CodeMaster.InspectType.Barcode)
        {
                @Html.Button(Resources.SYS.Global.Button_Judge, "Url_InspectionOrder_Judge", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnJudgeHu"},
                    {"needconfirm","true"},
                    {"style","display: none"},
                    {"onclick","judgeHu()"}
	            })
        }
    }
            }
            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/InspectionOrder/JudgeList")'">
                @Resources.SYS.Global.Button_Back</button>
        </div>
    </fieldset>
}
@{
    if (Model.Type == com.Sconit.CodeMaster.InspectType.Quantity)
    {
        Html.RenderAction("InspectionOrderDetailJudge", "InspectionOrder", new { inspectNo = Model.InspectNo, inspectType = Model.Type });
    }
    else if (Model.Type == com.Sconit.CodeMaster.InspectType.Barcode)
    {
        Html.RenderAction("InspectionOrderDetailJudgeWithHu", "InspectionOrder", new { inspectNo = Model.InspectNo });
    }
}
