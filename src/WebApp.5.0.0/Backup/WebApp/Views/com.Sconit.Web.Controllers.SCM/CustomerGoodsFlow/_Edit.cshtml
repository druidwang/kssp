@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.SCM.FlowMaster
@Html.Partial("_AjaxMessage")
<script type="text/javascript">
    function PartyTo_Change(e) {
        $('#LocationTo').data('tComboBox').value('');
        $('#LocationTo').data('tComboBox').text('');
        $("#LocationTo").data("tComboBox").reload();

        $('#ShipTo').data('tComboBox').value('');
        $('#ShipTo').data('tComboBox').text('');
        $("#ShipTo").data("tComboBox").reload();
    }

    function LocationTo_DataBinding(e) {
        e.data = {
            region: $("#PartyTo").val()
        };
    }

    function ShipTo_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }

    function Customer_Change(e) {
        $('#ShipFrom').data('tComboBox').value('');
        $('#ShipFrom').data('tComboBox').text('');
        $("#ShipFrom").data("tComboBox").reload();
    }

    function ShipFrom_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }

    function PriceList_Change(e) {
        var data = {
            party: $("#PartyFrom").val()
        };
    }
    function PriceList_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }
</script>
<form action="/CustomerGoodsFlow/_Edit" method="post">
<fieldset>
    <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBaseInfo</legend>
    <div class="editor">
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Code)
        </div>
        <div class="editor-field-2">
            @Html.DisplayFor(model => model.Code)
            @Html.Hidden("Code",Model!=null?Model.Code:string.Empty)
             @Html.Hidden("FlowStrategy",Model.FlowStrategy)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.IsActive)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsActive)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ReferenceFlow)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_FlowComboBox", "Common",
                    new { controlName = "ReferenceFlow", includeBlankOption = true, selectedValue = Model.ReferenceFlow });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.PartyFrom)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CustomerComboBox", "Common",
                    new { controlName = "PartyFrom", selectedValue = Model.PartyFrom, isChange = true });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.PartyTo)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_RegionComboBox", "Common",
                    new { controlName = "PartyTo", selectedValue = Model.PartyTo, isChange = true });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.LocationTo)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_LocationComboBox", "Common",
                    new
                    {
                        controlName = "LocationTo",
                        selectedValue = Model.LocationTo,
                        checkRegion = true
                    });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.Dock)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.Dock)
            @Html.ValidationMessageFor(model => model.Dock)
        </div>
         @*<div class="editor-label-1">
            <label>@Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceFormat</label>
        </div>
        <div class="editor-field-1">
            @Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceToolTips
        </div>


          <div class="editor-label-1">
            @Html.LabelFor(model => model.ExtraLocationTo)
        </div>
        <div class="editor-field-1">
            @Html.TextBoxFor(model => model.ExtraLocationTo)
        </div>*@
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ShipFrom)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_AddressComboBox", "Common",
                    new
                    {
                        controlName = "ShipFrom",
                        selectedValue = Model.ShipFrom,
                        checkParty = true,
                        type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress
                    });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ShipTo)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_AddressComboBox", "Common",
                    new
                    {
                        controlName = "ShipTo",
                        selectedValue = Model.ShipTo,
                        checkParty = true,
                        type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress
                    });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ReceiveGapTo)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common",
                    new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.ReceiveGapTo,
                        controlName = "ReceiveGapTo",
                        selectedValue = Model != null ? (int)Model.ReceiveGapTo : 0
                    });
            }
        </div>
    </div>
</fieldset>
<fieldset>
    <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBarCode</legend>
    <div class="editor">
        <div class="editor-label-2">
            @Html.LabelFor(model => model.HuTemplate)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common",
                    new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.HuTemplate,
                        controlName = "HuTemplate",
                        selectedValue = Model != null ? Model.HuTemplate : string.Empty
                    });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.IsReceiveScanHu)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsReceiveScanHu)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.IsShipScanHu)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsShipScanHu)
        </div>
        @*<div class="editor-label-2">
            @Html.LabelFor(model => model.IsReceiveFifo)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsReceiveFifo)
        </div>*@
    </div>
</fieldset>
<fieldset>
    <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendPrint</legend>
    <div class="editor">
        <div class="editor-label-2">
            @Html.LabelFor(model => model.IsPrintOrder)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsPrintOrder)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.OrderTemplate)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common",
                    new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate,
                        controlName = "OrderTemplate",
                        selectedValue = Model != null ? Model.OrderTemplate : string.Empty
                    });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.IsPrintAsn)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsPrintAsn)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.AsnTemplate)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common",
                    new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.AsnTemplate,
                        controlName = "AsnTemplate",
                        selectedValue = Model != null ? Model.AsnTemplate : string.Empty
                    });
            }
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.IsPrintRceipt)
        </div>
        <div class="editor-field-2">
            @Html.EditorFor(model => model.IsPrintRceipt)
        </div>
        <div class="editor-label-2">
            @Html.LabelFor(model => model.ReceiptTemplate)
        </div>
        <div class="editor-field-2">
            @{
                Html.RenderAction("_CodeMasterDropDownList", "Common",
                    new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate,
                        controlName = "ReceiptTemplate",
                        selectedValue = Model != null ? Model.ReceiptTemplate : string.Empty
                    });
            }
        </div>
    </div>
</fieldset>
<fieldset>
    <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendOrderControl</legend>
    <div class="editor">
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsOrderFulfillUC)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsOrderFulfillUC)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsShipFulfillUC)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsShipFulfillUC)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsReceiveFulfillUC)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsReceiveFulfillUC)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsListDet)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsListDet)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsManualCreateDetail)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsManualCreateDetail)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsShipByOrder)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsShipByOrder)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsShipExceed)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsShipExceed)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsReceiveExceed)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsReceiveExceed)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsAsnUniqueReceive)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsAsnUniqueReceive)
        </div>
        @*<div class="editor-label-3">
            @Html.LabelFor(model => model.IsCheckPartyFromAuthority)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsCheckPartyFromAuthority)
        </div>*@
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsCheckPartyToAuthority)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsCheckPartyToAuthority)
        </div>
    </div>
</fieldset>
<fieldset>
    <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendAutomatic</legend>
    <div class="editor">
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsAutoCreate)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsAutoCreate)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsAutoRelease)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsAutoRelease)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsAutoShip)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsAutoShip)
        </div>
        <div class="editor-label-3">
            @Html.LabelFor(model => model.IsAutoReceive)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsAutoReceive)
        </div>
        <div class="editor-label-3">
            @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_CustomerGoodsIsInspect)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsInspect)
        </div>
          <div class="editor-label-3">
            @Html.LabelFor(model => model.IsMRP)
        </div>
        <div class="editor-field-3">
            @Html.EditorFor(model => model.IsMRP)
        </div>
    </div>
</fieldset>
<div class="editor-footer">
   
    @Html.Button(Resources.SYS.Global.Button_Save, "Url_CustomerGoodsFlow_Edit", new Dictionary<string, string>()
	{
	    {"type", "submit"},
	    {"id", "btnEdit"},
        {"needconfirm","true"}
	})
    @Html.Button(Resources.SYS.Global.Button_Delete, "Url_CustomerGoodsFlow_Delete", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnDel"},
        {"needconfirm","true"},
        {"onclick","location.href='"+Url.Content("~/CustomerGoodsFlow/FlowDel/" +Model.Code)+"'"}
	})
    <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/CustomerGoodsFlow/List")'">
        @Resources.SYS.Global.Button_Back</button>
</div>
</form>
<script language="javascript" type="text/javascript">

    $(document).ready(function () {
        debugger
        $("form[action$='_Edit']").submit(function () {
            debugger
            $.post($(this).attr("action"), $(this).serialize(), function (response) {
                debugger
                var tabStrip = $("#TabStrip");
                var tabStripContent0 = tabStrip.data("tTabStrip").getContentElement(0);
                $(tabStripContent0).html(response);
            });
            return false;
        });
    });
</script>
