@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.SCM.FlowMaster
@{
    ViewBag.Title = Resources.SCM.FlowMaster.FlowMaster_Distribution;
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_DistributionFlow_View" });
}
<script type="text/javascript">
    function Customer_Change(e) {
        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
            $('#ShipTo').data('tComboBox').value('');
            $('#ShipTo').data('tComboBox').text('');
            $("#ShipTo").data("tComboBox").reload();

            $('#BillAddress').data('tComboBox').value('');
            $('#BillAddress').data('tComboBox').text('');
            $("#BillAddress").data("tComboBox").reload();

            $('#PriceList').data('tComboBox').value('');
            $('#PriceList').data('tComboBox').text('');
            $("#PriceList").data("tComboBox").reload();
        }
    }

    function PartyFrom_Change(e) {
        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }

            $('#LocationFrom').data('tComboBox').value('');
            $('#LocationFrom').data('tComboBox').text('');
            $("#LocationFrom").data("tComboBox").reload();

            $('#ShipFrom').data('tComboBox').value('');
            $('#ShipFrom').data('tComboBox').text('');
            $("#ShipFrom").data("tComboBox").reload();
        }
    }

    function LocationFrom_DataBinding(e) {
        e.data = {
            region: $("#PartyFrom").val()
        };
    }

    function ShipTo_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }

    function ShipFrom_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }

    function BillAddress_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }

    function PriceList_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Code)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Code)
                @Html.ValidationMessageFor(model => model.Code)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsActive)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsActive", true)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceFlow)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common",
        new
        {
            controlName = "ReferenceFlow",
            selectedValue = Model != null ? Model.ReferenceFlow : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_DistributionPartyFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_RegionComboBox", "Common",
        new
        {
            controlName = "PartyFrom",
            isChange = true,
            selectedValue = Model != null ? Model.PartyFrom : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_DistributionPartyTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CustomerComboBox", "Common",
        new
        {
            controlName = "PartyTo",
            isChange = true,
            selectedValue = Model != null ? Model.PartyTo : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.LocationFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
        new
        {
            controlName = "LocationFrom",
            checkRegion = true,
            selectedValue = Model != null ? Model.LocationFrom : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
            </div>
            @*<div class="editor-label-1">
                <label>@Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceFormat</label>
            </div>
            <div class="editor-field-1">
                @Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceToolTips
            </div>
   
        <div class="editor-label-1">
            @Html.LabelFor(model => model.ExtraLocationFrom)
        </div>
        <div class="editor-field-1">
            @Html.TextBoxFor(model => model.ExtraLocationFrom)
        </div>*@


            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipFrom",
            checkParty = true,
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model != null ? Model.ShipFrom : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipTo",
            checkParty = true,
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model != null ? Model.ShipTo : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BillAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "BillAddress",
            type = (int)com.Sconit.CodeMaster.AddressType.BillAddress,
            checkParty = true,
            selectedValue = Model != null ? Model.BillAddress : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PriceList)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_PriceListComboBox", "Common",
        new
        {
            controlName = "PriceList",
            checkParty = true,
            selectedValue = Model != null ? Model.PriceList : string.Empty
        });
                }
            </div>
            @*<div class="editor-label-2">
                @Html.LabelFor(model => model.BillTerm)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderBillTerm,
            controlName = "BillTerm",
            isConsignment = true,
            isShowNA = false,
            selectedValue = Model != null ? (int)Model.BillTerm : 1
        });
                }
            </div>*@
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiveGapTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.ReceiveGapTo,
            controlName = "ReceiveGapTo",
            selectedValue = Model != null ? (int)Model.ReceiveGapTo : 0
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PickStrategy)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_PickStrategyComboBox", "Common",
     new
     {
         controlName = "PickStrategy",
         selectedValue = Model != null ? Model.PickStrategy : string.Empty
     });
                }
            </div>
             <div class="editor-label-2">
                @Html.LabelFor(model => model.SalesOrg)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.SalesOrg)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.DistrChan)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.DistrChan))
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Dock)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Dock)
                @Html.ValidationMessageFor(model => model.Dock)
            </div>
           
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBarCode</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsShipScanHu)
            </div>
            <div class="editor-field-2">
                @Html.CheckBoxFor(model => model.IsShipScanHu)
            </div>
            @*            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPickFromBin)
            </div>
            <div class="editor-field-2">
                @Html.CheckBoxFor(model => model.IsPickFromBin)
            </div>*@
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsShipFifo)
            </div>
            <div class="editor-field-2">
                @Html.CheckBoxFor(model => model.IsShipFifo)
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendPrint</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintOrder)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintOrder", false)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate,
            controlName = "OrderTemplate",
            selectedValue = Model != null ? Model.OrderTemplate : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintAsn)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintAsn", true)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.AsnTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.AsnTemplate,
            controlName = "AsnTemplate",
            selectedValue = Model != null ? Model.AsnTemplate : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintRceipt)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintRceipt", true)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiptTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate,
            controlName = "ReceiptTemplate",
            selectedValue = Model != null ? Model.ReceiptTemplate : string.Empty
        });
                }
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendOrderControl</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsOrderFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsOrderFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsShipFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsShipFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsListDet)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsListDet", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsManualCreateDetail)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsManualCreateDetail", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsListPrice)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsListPrice", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsShipByOrder)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsShipByOrder", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCreatePickList)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsCreatePickList", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsShipExceed)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsShipExceed", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveExceed)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveExceed", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAsnUniqueReceive)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAsnUniqueReceive", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyFromAuthority)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsCheckPartyFromAuthority", true)
            </div>
            @*<div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyToAuthority)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsCheckPartyToAuthority", true)
            </div>*@
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendAutomatic</legend>
        <div class="editor">
            @*<div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoCreate)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoCreate", true)
            </div>*@
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoRelease)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoRelease", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoStart)
            </div>
            <div class="editor-field-3">
                @Html.EditorFor(model => model.IsAutoStart)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoShip)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoShip", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoReceive)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoReceive", false)
            </div>
             @*<div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoBill)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoBill", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsInspect)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsInspect", false)
            </div>*@
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsRejectInspect)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsRejectInspect", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsMRP)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsMRP", true)
            </div>
        </div>
    </fieldset>

    <div class="editor-footer">
        @Html.Button(Resources.SYS.Global.Button_New, "Url_DistributionFlow_Edit", new Dictionary<string, string>()
	{
	    {"type", "submit"},
	    {"id", "btnNew"},
        {"needconfirm","true"}
	})

        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/DistributionFlow/List")'">
            @Resources.SYS.Global.Button_Back</button>
    </div>
}