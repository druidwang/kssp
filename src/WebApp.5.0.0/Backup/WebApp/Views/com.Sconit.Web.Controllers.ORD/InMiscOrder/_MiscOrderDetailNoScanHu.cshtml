@model IEnumerable<com.Sconit.Entity.ORD.MiscOrderDetail>
<fieldset>
    <script type="text/javascript">
        function onItemComboBoxChange(e) {
            if (e.value != null) {
                var combobox = $(this).data("tComboBox");
                if (combobox == undefined) {
                    return;
                }
                if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                    combobox.value("");
                    $(e.target).parent().parent().next().html("");
                    $(e.target).parent().parent().next().next().html("");
                    $(e.target).parent().parent().next().next().next().html("");
                    $(e.target).parent().parent().next().next().next().next().html("");
                    combobox.reload();
                }
                else {
                    var data = {
                        "Code": e.value
                    };
                    $.ajax({
                        type: "post",
                        dataType: "json",
                        url: "/InMiscOrder/_WebOrderDetail/",
                        data: data,
                        success: function (data, textStatus) {
                            var $tGrid = $("#MiscOrderDetailNoScanHu").data("tGrid");
                            var oldData = $tGrid.dataItem($(e.target).parent().parent().parent());
                            if (data.Sequence > 0) {
                                $(e.target).parent().parent().prev().html('<span class="t-dirty"></span>' + data.Sequence);
                            }
                            $(e.target).parent().parent().next().html(data.ItemDescription);
                            $(e.target).parent().parent().next().next().html(data.ReferenceItemCode);
                            $(e.target).parent().parent().next().next().next().html('<span class="t-dirty"></span>' + data.Uom);
                            $(e.target).parent().parent().next().next().next().next().html('<span class="t-dirty"></span>' + data.UnitCount);
                            if (oldData != undefined) {
                                oldData.Sequence = data.Sequence;
                                oldData.ItemDescription = data.ItemDescription;
                                oldData.Uom = data.Uom;
                                oldData.UnitCount = data.UnitCount;
                                oldData.ReferenceItemCode = data.ReferenceItemCode;
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            alert(errorThrown);
                        }
                    });
                }
            }
        }


        function onLocationComboBoxChange(e) {
            var combobox = $(this).data("tComboBox");
            if (combobox == undefined) {
                return;
            }
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
        }

        function onLocationDataBinding(e) {
            e.data = {
                "Region": $("#Region").val(),
                "checkRegion": true
            };
        }

                function onSubmit(e) {
                    var grid = $("#MiscOrderDetailNoScanHu").data("tGrid");
                    if (grid == null) {
                        alert("明细不能为空");
                        return;
                    }
                    var inserted = grid.changeLog.inserted;
                    var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
                    var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

                    var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
                    var ordermstr = {

                        "MiscOrderNo": $("#MiscOrderNo").val(),
                        "moveType": $("#MoveType").val()
                    };
                    grid._convert(oderDetails);
                    $.ajax({
                        type: "post",
                        dataType: "text",
                        url: "/InMiscOrder/_SaveBatchEditing/",
                        data: $.extend(oderDetails, ordermstr),
                        success: function (data, ordermstr) {
                           
                            if (data != "") {
                                var orderData = {
                                    "id": data
                                };
                                $.ajax({
                                    type: "get",
                                    dataType: "html",
                                    url: "/InMiscOrder/Edit/",
                                    data: orderData,
                                    cache: false,
                                    success: function (data, textStatus) {
                                        var $tGrid = $("#content");
                                        $($tGrid).html(data);
                                    }
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            var errorMessages = XMLHttpRequest.responseText;
                            
                            $message.error(errorMessages);
                        }
                    });
                }
    </script>
    <legend>@Resources.ORD.MiscOrderDetail.MiscOrderDetail_Title_In</legend>
    @(Html.Telerik().Grid(Model)
                .Name("MiscOrderDetailNoScanHu")
                 .Editable(editing => editing.Mode(GridEditMode.InCell))
         .ToolBar(commands =>
         {
             if (ViewBag.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create.ToString())
             {

                 commands.Insert();
                 commands.Custom().Text(@Resources.SYS.Global.Button_SaveDetail).HtmlAttributes(new { onClick = "onSubmit()", href = "#" });
             }
         })
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .DataBinding(dataBinding => dataBinding.Ajax()
                         .Select("_SelectMiscOrderDetail", "InMiscOrder")
                         )
        .Columns(columns =>
        {
            if (ViewBag.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create.ToString())
            {
                columns.Bound(o => o.Sequence).Width(60);

                columns.Bound(o => o.Item).EditorTemplateName("ItemGridForeignKey").Width(130);
            }
            else {
                columns.Bound(o => o.Sequence).ReadOnly(true) ;
                columns.Bound(o => o.Item).ReadOnly(true).Width(160);
            }
            columns.Bound(o => o.ItemDescription).ReadOnly(true);
            columns.Bound(o => o.ReferenceItemCode).ReadOnly(true);
            columns.Bound(o => o.Uom).ReadOnly(true);
            columns.Bound(o => o.UnitCount).ReadOnly(true);
            if (ViewBag.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create.ToString())
            {
                columns.Bound(o => o.Location).EditorTemplateName("LocationGridForeignKey").Width(120);
                if (ViewBag.ReserveLine)
                {
                columns.Bound(o => o.ReserveNo);
                }
                if (ViewBag.ReserveLine)
                {
                    columns.Bound(o => o.ReserveLine);
                }
                if (ViewBag.EBELN)
                {
                    columns.Bound(o => o.EBELN);
                }
                if (ViewBag.EBELP)
                {
                    columns.Bound(o => o.EBELP);
                }
                
                    columns.Bound(o => o.Qty);
                
                columns.Command(commands => commands.Delete()).Width(100);
            }
            else {
                columns.Bound(o => o.Location).ReadOnly(true);
                if(ViewBag.ReserveNo){
                    columns.Bound(o => o.ReserveNo).ReadOnly(true);
                }
                if (ViewBag.ReserveLine)
                {
                    columns.Bound(o => o.ReserveLine).ReadOnly(true);
                }
                if (ViewBag.EBELN)
                {
                    columns.Bound(o => o.EBELN).ReadOnly(true);
                }
                if (ViewBag.EBELP)
                {
                    columns.Bound(o => o.EBELP).ReadOnly(true);
                }
                columns.Bound(o => o.Qty).ReadOnly(true);
            }
        })
        .Scrollable()
                 .Resizable(resizing => resizing.Columns(true))
        .Footer(false)
            )
</fieldset>
