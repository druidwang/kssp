@model com.Sconit.Entity.ORD.MiscOrderMaster
@using com.Sconit.Entity.CUST
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_ProductionFiScrapOrder_New" });
}
<script type="text/javascript">

    function onEdit() {
        var grid = $("#MiscOrderDetailGrid").data("tGrid");
        if (grid == null) {
            $message.error('明细不能为空。');
            return;
        }
        //if ($("#GeneralLedger").val() == "") {
        //    $message.error('总账科目为必填项。');
        //    return;
        //}

//        if ($("#CostCenter").val() == "") {
//            $message.error('成本中心为必填项。');
//            return;
//        }
        if ($("#FiScrapType").val() == "") {
            $message.error('废品类别为必填项。');
            return;
        }
        debugger
        var miscmstr = {
            "MiscOrderNo": $("#MiscOrderNo").val(),
            "EffectiveDate": $("#EffectiveDate").val(),
            "Note": $("#FiScrapType").val()
        }
        var sequences = "";
        var items = "";
        var qtys = "";
        var uoms = "";
        var rows = grid.$tbody.children("tr:not(.t-no-data)").filter("tr:visible");
        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            if ($.trim(row[0].childNodes[1].innerText) != "" && parseFloat($.trim(row[0].childNodes[6].innerText)) != 0) {
                if (items != "") {
                    sequences += ",";
                    items += ",";
                    qtys += ",";
                    uoms += ",";
                }
                sequences += $.trim(row[0].childNodes[0].innerText);
                items += $.trim(row[0].childNodes[1].innerText);
                uoms += $.trim(row[0].childNodes[4].innerText);
                qtys += $.trim(row[0].childNodes[6].innerText);
                if ($.trim(row[0].childNodes[4].innerText) == "") {
                    $message.error('单位不能为空.');
                    return;
                }
            }
        }

        var made = {
            "sequences": sequences,
            "items": items,
            "uoms": uoms,
            "qtys": qtys
        }

        $.ajax({
            type: "post",
            dataType: "text",
            url: "/ProductionFiScraptOrder/ScrapEditMiscOrder/",
            data: $.extend(miscmstr, made),
            success: function (data) {
                $("#content").html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function Flow_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox == undefined) {
            return;
        }
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            combobox.reload();
        } else {
            var data = { "flow": e.value };
            $.ajax({
                type: "get",
                dataType: "text",
                url: "/ProductionFiScraptOrder/_GetMiscOrderLocation/",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    document.getElementById("miscOrderLocation").innerHTML = "<label>" + data + "</label>";
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(errorThrown);
                }
            });
        }
    }

    function Print(e) {
        var data = {
            "miscOrderNo": $("#MiscOrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "/ProductionFiScraptOrder/Print/",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    PrintOrder(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
//                var errorMessages = XMLHttpRequest.responseText;
                //                $message.error(errorMessages);
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
    function Export(e) {
        $("#miscOrderNo").val($("#MiscOrderNo").val());
        $("#hiddenForm").submit();
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.MiscOrderNo)
            </div>
            <div class="search-field">
                @Html.DisplayFor(model => model.MiscOrderNo)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.MoveType)
            </div>
            <div class="search-field">
                @{
                    Html.RenderAction("_MoveTypeDropDownList", "Common", new
                        {
                            SubType = (int)com.Sconit.CodeMaster.MiscOrderSubType.COST,
                            controlName = "MoveType1",
                            enable = false,
                            selectedValue = Model != null && Model.MoveType != null ? Model.MoveType : string.Empty
                        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.EffectiveDate)
                @Html.HiddenFor(model => model.EffectiveDate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
           Html.RenderAction("_CodeMasterDropDownList", "Common", new
           {
               code = com.Sconit.CodeMaster.CodeMaster.MiscOrderStatus,
               controlName = "Status",
               selectedValue = (int)Model.Status,
               enable = false

           });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="search-field" id="miscOrderLocation">
                @Html.DisplayFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateDate)
            </div>
            @*<div class="editor-label-2">
                @Html.LabelFor(model => model.CostCenter)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CostCenter)
            </div>*@
            <div class="editor-label-2">
                @Resources.MRP.MrpExScrap.MrpExScrap_ScrapType
            </div>
            <div class="editor-field-2">
                @{
           Html.RenderAction("_CodeMasterComboBox", "Common", new
           {
               code = com.Sconit.CodeMaster.CodeMaster.ScheduleType,
               controlName = "FiScrapType",
               selectedValue=Model.Note,
               enble = Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create,
               isMrp=true
           });
                }
            </div>
            <div class="editor-label-2">
                @*@Html.LabelFor(model => model.Note)*@
            </div>
            <div class="editor-field-2">
                @*@{
           if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create)
           {   
                        @Html.EditorFor(model => model.Note)
           }
           else
           {
                        @Html.DisplayFor(model => model.Note)
                        @Html.HiddenFor(model => model.Note)
           }
                }*@
                @Html.Hidden("MiscOrderNo", Model.MiscOrderNo)
            </div>
        </div>
        <div class="editor-footer">
            @{
           if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create)
           {   
                @Html.Button(Resources.SYS.Global.Button_Save, "Url_ProductionFiScraptOrder_ScrapEdit", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onEdit()"}
	        })

                @Html.Button(Resources.SYS.Global.Button_Delete, "Url_ProductionFiScraptOrder_ScrapEdit", new Dictionary<string, string>()
	            {
	            {"type", "button"},
	                {"id", "btnDeletescrap"},
                    {"needconfirm","true"},
                    {"onclick","location.href='"+Url.Content("~/ProductionFiScraptOrder/btnDeletescrap/" + Model.MiscOrderNo) +"'"}
	            })
                @Html.Button(Resources.SYS.Global.Button_Confirm, "Url_ProductionFiScraptOrder_ScrapConfirm", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnCloseScrap"},
                    {"needconfirm","true"},
                     {"onclick","location.href='"+Url.Content("~/ProductionFiScraptOrder/btnCloseScrap/" + Model.MiscOrderNo) +"'"}
	            })
               
           }
           else if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Close)
           {
                @Html.Button(Resources.SYS.Global.Button_Cancel, "Url_ProductionFiScraptOrder_ScrapConfirm", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnCancel"},
                    {"needconfirm","true"},
                    {"onclick","location.href='"+Url.Content("~/ProductionFiScraptOrder/btnCancelScrap/" + Model.MiscOrderNo) +"'"}
	            })
           }
            }
            
            <button type="button" id="btnPrint" onclick="Print()">
                @Resources.SYS.Global.Button_Print</button>
            
            <button type="button" id="btnExport" onclick="Export()">
                @Resources.SYS.Global.Button_Export</button>

            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProductionFiScraptOrder/ScrapSearchList")'">
                @Resources.SYS.Global.Button_Back</button>

        </div>
    </fieldset>
    <div id="divOutMiscOrderDetailList">
        @{
           Html.RenderAction("_MiscOrderDetail", "ProductionFiScraptOrder", new { miscOrderNo = Model.MiscOrderNo, location = Model.Location });
        }
    </div>
}

<form id="hiddenForm" action="/ProductionFiScraptOrder/SaveToClient" target="_blank"
method="post">
<input id="miscOrderNo" name="miscOrderNo" type="hidden" />
</form>
