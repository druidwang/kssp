@model com.Sconit.Entity.ORD.OrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_OrderMstr_Procurement_Import" });
}
<script type="text/javascript">


    function onWindowTimeChange(e) {
        if ($("#Flow").val() != null && $("#Flow").val() != "") {
            $.ajax({
                type: "Post",
                dataType: "text",
                url: "/ProcurementOrder/_WindowTime/",
                data: { "windowTime": e.value.toLocaleString(), "flow": $("#Flow").val() },
                success: function (data, textStatus) {
                    var newDate = new Date(data);
                    // $("#StartTime").val(data);
                    $("#StartTime").val(data);
                    // $("#StartTime").data("tDateTimePicker").selectedValue = newDate;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    
                    $message.error(errorThrown);
                }
            });
        }
    }

    function onCreate() {
        
       
        var grid = $("#OrderDetail").data("tGrid");
        if (grid == null) {
            $message.error('@Resources.ORD.OrderMaster.Errors_OrderDetailIsEmpty');
            
            return;
        }
        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
        var ordermstr = {
            "Flow": $("#Flow").val(),
            "StartTime": $("#StartTime").val(),
            "WindowTime": $("#WindowTime").val(),
            "EffectiveDate": $("#EffectiveDate").val(),
            "ReferenceOrderNo": $("#ReferenceOrderNo").val(),
            "ExternalOrderNo": $("ExternalOrderNo").val(),
            "Priority": $("input[type=radio][name=Priority]:checked").val()
        }

        grid._convert(oderDetails);
        $.ajax({
            type: "post",
            dataType: "text",
            url: "/ProcurementOrder/CreateOrder/",
            data: $.extend(oderDetails, ordermstr),
            success: function (data, ordermstr) {
                if (data != "") {
                    var orderData = {
                        "orderNo": data
                    };
                    $.ajax({
                        type: "post",
                        dataType: "html",
                        url: "/ProcurementOrder/Edit/",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            var $tGrid = $("#content");
                            $($tGrid).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = XMLHttpRequest.responseText;
                $message.error(errorMessages);
                
            }
        });

    }

    function onSuccess(e) {
        $message.success(e.response.status);
    }
    function onUploadError(e) {
        $('.t-upload-files').remove();
        var errorMessages =  e.XMLHttpRequest.responseText ;
        $message.error(errorMessages);
        
        e.preventDefault();
       

    }

    function onUpload(e) {
        e.data = {
            Flow: $("#Flow").val(),
            StartTime: $("#StartTime").val(),
            WindowTime: $("#WindowTime").val(),
            EffectiveDate: $("#EffectiveDate").val(),
            ReferenceOrderNo: $("#ReferenceOrderNo").val(),
            ExternalOrderNo: $("ExternalOrderNo").val(),
            Priority: $("input[type=radio][name=Priority]:checked").val()
        };

    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common", new { controlName = "Flow", type = (int)com.Sconit.CodeMaster.OrderType.Procurement, isCreateOrder = true });
                }
                @Html.ValidationMessageFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                .Name("EffectiveDate")
                        )
                </div>
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                            .Name("WindowTime")
                            .ClientEvents(events => events
                            .OnChange("onWindowTimeChange")
                        )
                    )
                @Html.ValidationMessageFor(model => model.WindowTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                            .Name("StartTime")
                        )
                @Html.ValidationMessageFor(model => model.StartTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @Html.RadioButton("Priority", (int)com.Sconit.CodeMaster.OrderPriority.Normal, true)@Resources.SYS.CodeDetail.CodeDetail_OrderPriority_Normal
                @Html.RadioButton("Priority", (int)com.Sconit.CodeMaster.OrderPriority.Urgent)@Resources.SYS.CodeDetail.CodeDetail_OrderPriority_Urgent
            </div>
            <div class="search-label">
                <label>
                    <a href='/Resource/Templates/UploadTemplate/OrderDetail.xls'>@Resources.EXT.PageLan.TemplateDownload</a>
                </label>
            </div>
            <div class="search-field">
               @(Html.Telerik().Upload()
                    .Name("attachments")
                    .Multiple(false)
                    .Async(async => async
                    .Save("ImportProcurementOrder", "ProcurementOrder")
                    .AutoUpload(true))
                         .ClientEvents(e => e.OnSuccess("onSuccess").OnError("onUploadError").OnUpload("onUpload")))
            </div>
        </div>
        @*  <div class="editor-footer">
            @Html.Button(Resources.SYS.Global.Button_New, "Url_OrderMstr_Procurement_Edit", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onCreate()"}
	        })
        </div>*@
    </fieldset>
   
    <div id="fdOrderDetail" style="display: none;">
    </div>
   
}
