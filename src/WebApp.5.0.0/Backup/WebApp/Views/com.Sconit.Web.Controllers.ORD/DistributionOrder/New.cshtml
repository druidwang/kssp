@model com.Sconit.Entity.ORD.OrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_OrderMstr_Distribution_New" });
}
<script type="text/javascript">
    function Flow_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox == undefined) {
            return;
        }
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            $("#fdOrderDetail").hide();
        } else {
            $("#fdOrderDetail").html("Loading...");
            $("#fdOrderDetail").show();
            var data = { "flow": e.value };
            $.ajax({
                type: "get",
                dataType: "html",
                url: "/DistributionOrder/_OrderDetailList/",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    $("#fdOrderDetail").html(data);
                    //$("#fdOrderDetail").show();
                    $("tr.t-no-data").find("td").text("Loading...");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(errorThrown);
                }
            });
        }
    }

    function onWindowTimeChange(e) {
        if ($("#Flow").val() != null && $("#Flow").val() != "") {
            $.ajax({
                type: "post",
                dataType: "text",
                url: "/DistributionOrder/_WindowTime/",
                data: { "windowTime": e.value.format("yyyy-MM-dd hh:mm"), "flow": $("#Flow").val() },
                success: function (data, textStatus) {
                    var newDate = new Date(data);
                    $("#StartTime").val(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }
    }

    function onCreate() {
        var combobox = $("#Flow").data("tComboBox");
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            $("#fdOrderDetail").hide();
            $message.error("@Resources.ORD.OrderMaster.Errors_FlowIsNotCorrect");
        } else {
            var isDistribution = ($("#IsDistribution").val().toUpperCase() == "TRUE");
            var grid = $("#OrderDetail").data("tGrid");
            if (grid == null) {
                $message.error("@Resources.ORD.OrderMaster.Errors_OrderDetailIsEmpty");
                return;
            }
            var Sequences = new Array();
            var Items = new Array();
            var ReferenceItemCodes = new Array();
            var ItemDescriptions = new Array();
            var UnitCounts = new Array();
            var UnitCountDescriptions = new Array();
            var Uoms = new Array();
            var LocationFroms = new Array();
            var LocationTos = new Array();
            var OrderedQtys = new Array();
            var HuTos = new Array();
            var Remarks = new Array();
            var rows = grid.$tbody.children("tr:not(.t-no-data)").filter("tr:visible");
            var i = 0;
            var orderedIndex = grid.columns.length - 3;
            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
                var row = $(rows[rowIndex]);
                if ($.trim(row[0].childNodes[1].innerText) != "" && parseFloat($.trim(row[0].childNodes[orderedIndex].innerText)) > 0) {
                    Sequences[i] = $.trim(row[0].childNodes[0].innerText);
                    Items[i] = $.trim(row[0].childNodes[1].innerText);
                    UnitCounts[i] = $.trim(row[0].childNodes[4].innerText);
                    Uoms[i] = $.trim(row[0].childNodes[5].innerText);
                    LocationFroms[i] = $.trim(row[0].childNodes[7].innerText);
                    HuTos[i] = $.trim(row[0].childNodes[orderedIndex - 1].innerText);
                    OrderedQtys[i] = $.trim(row[0].childNodes[orderedIndex].innerText);
                    Remarks[i] = $.trim(row[0].childNodes[orderedIndex + 1].innerText);
                    if (!isDistribution) {
                        LocationTos[i] = $.trim(row[0].childNodes[8].innerText);
                    }
                    i++;
                }
            }
            var ordermstr = {
                "Flow": $("#Flow").val(),
                "StartTime": $("#StartTime").val(),
                "WindowTime": $("#WindowTime").val(),
                "EffectiveDate": $("#EffectiveDate").val(),
                "ReferenceOrderNo": $("#ReferenceOrderNo").val(),
                "ExternalOrderNo": $("#ExternalOrderNo").val(),
                "IsIndepentDemand": $("input[type=checkbox][name=IsIndepentDemand]:checked").val(),
                "Priority": $("input[type=radio][name=Priority]:checked").val(),
                "QualityType": $("#QualityType").val()
            }
            var made = {
                "Sequences": Sequences,
                "Items": Items,
                "UnitCounts": UnitCounts,
                "Uoms": Uoms,
                "LocationFroms": LocationFroms,
                "LocationTos": LocationTos,
                "OrderedQtys": OrderedQtys,
                "HuTos": HuTos,
                "Remarks": Remarks
            }

            $.ajax({
                type: "post",
                dataType: "json",
                url: "/DistributionOrder/NewCreateOrder/",
                data: $.extend(made, ordermstr),
                traditional: true,
                success: function (data, ordermstr) {
                    if (data != null && data.Data != null && data.Data.orderNo != undefined) {
                        window.location.href = "/DistributionOrder/Edit/?orderNo=" + data.Data.orderNo;
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }
    }

    Date.prototype.format = function (format) {
        var o = {
            "M+": this.getMonth() + 1, // month  
            "d+": this.getDate(), // day  
            "h+": this.getHours(), // hour  
            "m+": this.getMinutes(), // minute  
            "s+": this.getSeconds(), // second  
            "q+": Math.floor((this.getMonth() + 3) / 3), // quarter  
            "S": this.getMilliseconds()
        }

        if (/(y+)/.test(format)) {
            format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        }

        for (var k in o) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
            }
        }
        return format;
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common", new
    {
        controlName = "Flow",
        type = (int)com.Sconit.CodeMaster.OrderType.Distribution,
        isChange = true
    });
                }
                @Html.ValidationMessageFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @Html.RadioButton("Priority", (int)com.Sconit.CodeMaster.OrderPriority.Normal, true)@Resources.SYS.CodeDetail.CodeDetail_OrderPriority_Normal
                @Html.RadioButton("Priority", (int)com.Sconit.CodeMaster.OrderPriority.Urgent)@Resources.SYS.CodeDetail.CodeDetail_OrderPriority_Urgent
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                            .Name("WindowTime")
                            .ClientEvents(events => events
                            .OnChange("onWindowTimeChange")
                        )
                    )
                    @Html.ValidationMessageFor(model => model.WindowTime)
                </div>
                @Html.ValidationMessageFor(model => model.WindowTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                            .Name("StartTime")
                        )
                @Html.ValidationMessageFor(model => model.StartTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ExternalOrderNo)
            </div>
            @if (ViewBag.HasIsIndepentDemandPermssion)
            {
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsIndepentDemand)
                </div>
                <div class="editor-field-2">
                    @Html.EditorFor(model => model.IsIndepentDemand)
                </div>
            }
            <div class="editor-label-2">
                <label>
                @Resources.INV.LocationTransaction.LocationTransaction_QualityType
                </label>
            </div>
            <div class="editor-field-2">
                @{
            Html.RenderAction("_CodeMasterDropDownList", "Common", new
            {
                code = com.Sconit.CodeMaster.CodeMaster.QualityType,
                controlName = "QualityType",
                selectedValue = Model != null ? ((int)Model.QualityType).ToString() : null,
                //includeBlankOption = true
            });
                }
            </div>
        </div>
        <div class="editor-footer">
            @Html.Button(Resources.SYS.Global.Button_New, "Url_OrderMstr_Distribution_Edit", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onCreate()"}
	        })
        </div>
    </fieldset>
   
    <div id="fdOrderDetail" style="display: none;">
    </div>
}
